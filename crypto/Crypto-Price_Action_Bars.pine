//@version=4
study("Crypto - Price Action Bars", overlay=true)
//, max_labels_count=100

sdj                   = input(true, title="Show Doji?", group="Neutral Bar/Zone")
sgtb                  = input(true, title="Show Gap?", group="Neutral Bar/Zone")
sst                   = input(true, title="Show Spinning Top?", group="Neutral Bar/Zone")
soo                   = input(true, title="Show OO?", group="Breakout Mode")
sioi                  = input(true, title="Show IOI?", group="Neutral Bar/Zone")
smld                  = input(true, title="Show Momentum Slow Down?", group="Momentum")
smsu                  = input(true, title="Show Momentum Speed Up?", group="Momentum")
smp                   = input(true, title="Show Momentum Pause?", group="Momentum")
stz                   = input(true, title="Show Tweezer Top/Bottom?", group="Reversal Bars")
skgr                  = input(true, title="Show Kangaroo Tail?", group="Trend Continuation")
stb                   = input(true, title="Show Trend Bar?", group="Trend Continuation")
sfk                   = input(true, title="Show Fakey. Inside bar false-break?", group="False Breakout Bars")
sfb                   = input(true, title="Show False Breakout. Congestion false-break?", group="False Breakout Bars")
snsd                  = input(true, title="Show No Supply/Demand Bars?", group="Reversal Bars")
senf                  = input(true, title="Show Engulfing. V-Shaped Reversal?", group="Reversal Bars")
seb                   = input(true, title="Show Exhausted Bar?", group="Reversal Bars")
shk                   = input(true, title="Show Hikkake Pattern?", group="Trapped Traders")
srft                  = input(true, title="Show Rising/Failing Three?", group="Trend Continuation")
siz                   = input(true, title="Show Indecision Zone Break out?", group="Neutral Bar/Zone", tooltip="Child bars oscillate inside mother's wick")
sbt                   = input(true, title="Show Broadening Triangle?", group="Triangle")
sstr                  = input(true, title="Show Symmetrical Triangle?", group="Triangle")
sss                   = input(true, title="Show Stair Step?", group="Neutral Bar/Zone")
sib                   = input(true, title="Show Coiling Inside bars Break out?", group="Congestion Zone Breakout")
scz                   = input(true, title="Show Congestion Zone?", group="Congestion Bars")
snr7                  = input(true, title="Show NR7?", group="Congestion Bars")
s3br                  = input(true, title="Show Three Bar Reversal?", group="Reversal Bars")
spi                   = input(true, title="Show Pressure Increase?", group="Momentum", tooltip="Wick's getting longer")
spz                   = input(true, title="Show Pressure Zone?", group="Momentum", tooltip="Traders hoping to identify a short-term move in the market's direction")
sfz                   = input(true, title="Show Forbidden Zone?", group="Momentum")
ssp                   = input(true, title="Show Stalled/Advance Block pattern?", group="Climax", tooltip="S < S < S or R < R < R")
std                   = input(true, title="Show The Deceleration?", group="Climax", tooltip="A > B > C")
sac                   = input(true, title="Show The Anti-Climax?", group="Climax", tooltip="A < B < C")
eav                   = input(8, minval=1, maxval=100, title="EMA Depth For Body Average/Volatility")
wav                   = input(13, minval=1, maxval=100, title="EMA Depth For Wick Average/Volatility")
pivotlbar             = input(13, minval=1, maxval=99, title="Length to Highest/Lowest")
wm                    = input(defval = 2.0, step = 0.5, minval = 2.0, maxval=5.0, title="Wick Multiplier")
bodyPercentage        = input(defval = 0.40, step = 0.1, minval = 0.1, maxval=0.99, title="Body Percentage")
pctShadow             = input(50, minval=1, maxval=99, title="Percentage Input Of Up/Down Shadow, What % The Wick Of Candle Has To Be Compared To Body")
color_be_momentum     = input(color.maroon, "Color Bearish Momentum")
color_bu_momentum     = input(color.lime, "Color Bullish Momentum")
color_reverse         = input(color.purple, "Color Reverse")
color_pinbar          = input(color.silver, "Color Pinbar")
color_breakout        = input(color.yellow, "Color Break out")

//Volume Average
emaVol25 = ema(volume, 25)

//EMA
// medium trend
ema25 = ema(close, 25)
highAboveEMA25  = high > ema25
highBelowEMA25  = high < ema25
closeAboveEMA25 = close > ema25 
closeBelowEMA25 = close < ema25 
openAboveEMA25  = open > ema25
openBelowEMA25  = open < ema25 
lowAboveEMA25   = low > ema25
lowBelowEMA25   = low < ema25

// long trend
ema200 = ema(close, 200)
highAboveEMA200  = high > ema200
highBelowEMA200  = high < ema200
closeAboveEMA200 = close > ema200 
closeBelowEMA200 = close < ema200 
openAboveEMA200  = open > ema200
openBelowEMA200  = open < ema200 
lowAboveEMA200   = low > ema200
lowBelowEMA200   = low < ema200

// spread|range
spread    = abs(close - open)
// spread    = bodyHigh - bodyLow
bodyHigh  = max(close, open)
bodyLow   = min(close, open)
range     = high - low
upShadow  = high - bodyHigh
dnShadow  = bodyLow - low
whiteBody = open < close
blackBody = open > close

// EMA
spreadAvg             = ema(spread, eav)
rangeAvg              = ema(range, eav)
averageTopWickSize    = sma(upShadow, wav)
averageBottomWickSize = sma(dnShadow, wav)

bigBody         = spread > spreadAvg*2
mediumLongBody  = spread > spreadAvg and spread < spreadAvg*2
longBody        = spread > spreadAvg
smallBody       = spread < spreadAvg
mediumSmallBody = spread < spreadAvg and spread > spreadAvg/2
tinyBody        = spread < spreadAvg/2
bodyMiddle      = spread / 2 + bodyLow

bigSpreadTaken     = spread > range*0.7
averageSpreadTaken = spread > range*0.5
smallSpreadTaken   = spread > range*0.3
tinySpreadTaken    = spread < range*0.3

// projection check
f_isProjectionGettingSmaller() =>
    bool isProjectionGettingSmaller = false
    wickA = close > open ? low[3] - low[2] : high[2] - high[3]
    wickB = close > open ? low[2] - low[1] : high[1] - high[2]
    wickC = close > open ? low[1] - low    : high - high[1]
    if wickA > wickB and wickB > wickC
        isProjectionGettingSmaller := true

	_isProjectionGettingSmaller = isProjectionGettingSmaller
    [_isProjectionGettingSmaller]

f_dnLastProjectionIsBiggest() =>
    bool lastProjectionIsBiggest = false
    wickA = low[3] - low[2] 
    wickB = low[2] - low[1] 
    wickC = low[1] - low  
    if wickA < wickB and wickB < wickC
        lastProjectionIsBiggest := true

	_dnLastProjectionIsBiggest = lastProjectionIsBiggest
    [_dnLastProjectionIsBiggest]

f_upLastProjectionIsBiggest() =>
    bool lastProjectionIsBiggest = false
    wickA = high[2] - high[3] 
    wickB = high[1] - high[2] 
    wickC = high - high[1]  
    if wickA < wickB and wickB < wickC
        lastProjectionIsBiggest := true

	_upLastProjectionIsBiggest = lastProjectionIsBiggest
    [_upLastProjectionIsBiggest]

// smallest spread check
f_isSmallest(start_index, end_index) =>
    bool isSmallestSpread = true
    for i = start_index to end_index
        if spread > spread[i] 
            isSmallestSpread := false
            break

	_isSmallestSpread = isSmallestSpread
    [_isSmallestSpread]

// lowest check
f_isLowest(lowest_index, start_index, end_index) =>
    bool isLowestLow = true
    for i = start_index to end_index
        if low[lowest_index] > low[i] 
            isLowestLow := false
            break

	_isLowestLow = isLowestLow
    [_isLowestLow]
// highest check
f_isHighest(highest_index, start_index, end_index) =>
    bool isHighestHigh = true
    for i = start_index to end_index
        if high[highest_index] < high[i]
            isHighestHigh := false
            break

	_isHighestHigh = isHighestHigh
    [_isHighestHigh]

[firstPreviousBarIsHighestHigh]  = f_isHighest(1, 2, pivotlbar + 2)
[secondPreviousBarIsHighestHigh] = f_isHighest(2, 3, pivotlbar + 3)
[firstPreviousBarIsLowestLow]    = f_isLowest(1, 2, pivotlbar + 2)
[secondPreviousBarIsLowestLow]   = f_isLowest(2, 3, pivotlbar + 3)
[thirdPreviousBarIsHighestLow]    = f_isHighest(3, 4, pivotlbar + 4)
[thirdPreviousBarIsLowestLow]   = f_isLowest(3, 4, pivotlbar + 4)

highestBarCheck() => highestbars(high, pivotlbar) == 0 ? 1 : 0
lowestBarCheck()  => lowestbars(low, pivotlbar) == 0 ? 1 : 0
highestBarCheckWithParam(length) => highestbars(high, length) == 0 ? 1 : 0
lowestBarCheckWithParam(length)  => lowestbars(low, length) == 0 ? 1 : 0

// Marubozu
// tong chieu dau rau nen tren va rau nen duoi bang x% cua range nen
rangeTakenByBothShadows() => (upShadow + dnShadow) <= (high - low)*0.7 ? 1 : 0
// chieu dai rau nen tren so voi muc cho phep cua rau nen
spreadTakenByUpShadow()   => upShadow < pctShadow/100*spread ? 1 : 0
// chieu dai rau nen duoi so voi muc cho phep cua rau nen
spreadTakenByDnShadow()   => dnShadow < pctShadow/100*spread ? 1 : 0

marubozuUpBar = close > open and rangeTakenByBothShadows() and spreadTakenByUpShadow()
marubozuDnBar = close < open and rangeTakenByBothShadows() and spreadTakenByDnShadow()

///PinBars
[isSmallestSpread]  = f_isSmallest(1, 3)
closeInsidePreviousBar = open <= high[1] and open >= low[1] and close < high[1] and close > low[1]
bullishPinbar = spread <= spreadAvg/3 and isSmallestSpread and lowestBarCheck() and dnShadow > averageBottomWickSize*2 and upShadow*2 < dnShadow
bearishPinbar = spread <= spreadAvg/3 and isSmallestSpread and highestBarCheck() and upShadow > averageTopWickSize*2 and upShadow > dnShadow*2

//Piercing bar
bullishPiercing = blackBody[1] and longBody[1] and whiteBody and open <= low[1] and close >= bodyMiddle[1] and close < open[1]
bearishPiercing = whiteBody[1] and longBody[1] and blackBody and open >= high[1] and close <= bodyMiddle[1] and close > open[1]

// Engulfing bar
bearishEngulfing = blackBody and longBody and whiteBody[1] and mediumLongBody[1] and close <= open[1] and open >= close[1] and ( close < open[1] or open > close[1] )
bullishEngulfing = whiteBody and longBody and blackBody[1] and mediumLongBody[1] and close >= open[1] and open <= close[1] and ( close > open[1] or open < close[1] )

//Doji 
dojiBodyPercent = 5.0
shadowEqualsPercent = 100.0
shadowEquals = upShadow == dnShadow or (abs(upShadow - dnShadow) / dnShadow * 100) < shadowEqualsPercent and (abs(dnShadow - upShadow) / upShadow * 100) < shadowEqualsPercent
isDojiBody = range > 0 and spread <= range * dojiBodyPercent / 100
doji = isDojiBody and shadowEquals
dragonflyDoji = isDojiBody and upShadow <= spread
gravestoneDoji = isDojiBody and dnShadow <= spread

// Spinning Top 
spinningTopPercent = 34.0
spinningTopWhite = dnShadow >= range / 100 * spinningTopPercent and upShadow >= range / 100 * spinningTopPercent and not isDojiBody and whiteBody
spinningTopBlack = dnShadow >= range / 100 * spinningTopPercent and upShadow >= range / 100 * spinningTopPercent and not isDojiBody and blackBody

// Shooting Star / Hammer
factor = 2.0 // shows the number of times the shadow dominates the candlestick body
shadowPercent = 5.0 // size of shadows
hasUpShadow = upShadow > shadowPercent / 100 * range
hasDnShadow = dnShadow > shadowPercent / 100 * range
shootingStar = smallBody and spread > 0 and bodyHigh < hl2 and upShadow >= factor * spread and not hasDnShadow
hammer       = smallBody and spread > 0 and bodyLow > hl2 and dnShadow >= factor * spread and not hasUpShadow

// Tweezer Top/Bottom
tweezerTop  = (not isDojiBody or (hasUpShadow and hasDnShadow)) and abs(high-high[1]) <= spreadAvg*0.05 and whiteBody[1] and blackBody and longBody[1]
tweerBottom = (not isDojiBody or (hasUpShadow and hasDnShadow)) and abs(low-low[1]) <= spreadAvg*0.05 and blackBody[1] and whiteBody and longBody[1]

//=========================================================================|
//                    TWEERZER TOP/BOTTOM                                  | 
//=========================================================================|
//Tweezer Top
bool twTop_secondBar     = false
bool twTop_firstBar      = false
bool twTop_volume        = false
bool twTop_hl            = false
bool twTop_deviant       = false

if whiteBody[1] and longBody[1]
    twTop_secondBar := true

if (not isDojiBody or (hasUpShadow and hasDnShadow)) and blackBody
    twTop_firstBar := true

if abs(high-high[1]) <= spreadAvg*0.05
    twTop_deviant := true

if volume[1] > emaVol25 or volume > emaVol25 or volume > volume[1]
    twTop_volume := true   

if firstPreviousBarIsHighestHigh or highestBarCheck() 
    twTop_hl := true

twTop() => stz and twTop_secondBar and twTop_firstBar and twTop_deviant and twTop_hl and (twTop_volume or close <= bodyMiddle[1])

//Tweezer Bottom
bool twBottom_secondBar     = false
bool twBottom_firstBar      = false
bool twBottom_volume        = false
bool twBottom_hl            = false
bool twBottom_deviant       = false

if blackBody[1] and longBody[1]
    twBottom_secondBar := true

if (not isDojiBody or (hasUpShadow and hasDnShadow)) and whiteBody
    twBottom_firstBar := true

if abs(low-low[1]) <= spreadAvg*0.05
    twBottom_deviant := true

if volume[1] > emaVol25 or volume > emaVol25 or volume > volume[1]
    twBottom_volume := true   

if firstPreviousBarIsLowestLow or lowestBarCheck() 
    twBottom_hl := true

twBottom() => stz and twBottom_secondBar and twBottom_firstBar and twBottom_deviant and twBottom_hl and (twBottom_volume or close >= bodyMiddle[1])


//=========================================================================|
//                    EXHAUSTED BAR                                        | 
//=========================================================================|
bool bottomExhausted_2         = false
bool bottomExhausted_1         = false
bool bottomExhausted_0         = false
bool bottomExhausted_volume    = false

if close[2] < open[2]
    bottomExhausted_2 := true

if close[1] < open[1] and spread[1] > spreadAvg and averageSpreadTaken[1]
    bottomExhausted_1 := true

if close > open and open < close[1] and close > bodyMiddle[1] and close <= open[1]
    bottomExhausted_0 := true

if volume < volume[1] and volume < emaVol25
    bottomExhausted_volume := true   

bottomExhausted() => seb and bottomExhausted_volume and bottomExhausted_0 and bottomExhausted_1 and bottomExhausted_2

bool bottomExhausted2_1         = false
bool bottomExhausted2_0         = false
bool bottomExhausted2_volume    = false
bool bottomExhausted2_spread    = false
bool bottomExhausted2_hl        = false

if close[1] < open[1] and close[1] < close[2]
    bottomExhausted2_1 := true

if close > open and open > close[1] and close > (bodyHigh[1] - bodyLow[1])*2/3 + bodyLow[1] and close <= high[1]
    bottomExhausted2_0 := true

if volume > emaVol25 or volume[1] > emaVol25
    bottomExhausted2_volume := true   

if spread[1] > spreadAvg and (averageSpreadTaken[1] or (upShadow[1] < dnShadow[1] and dnShadow[1] > averageTopWickSize))
    bottomExhausted2_spread := true

if  firstPreviousBarIsLowestLow or lowestBarCheck()
    bottomExhausted2_hl := true 

bottomExhausted2() => seb and bottomExhausted2_volume and bottomExhausted2_0 and bottomExhausted2_1 and bottomExhausted2_spread and bottomExhausted2_hl

//-----
bool topExhausted_2         = false
bool topExhausted_1         = false
bool topExhausted_0         = false
bool topExhausted_volume    = false

if close[2] > open[2]
    topExhausted_2 := true

if close[1] > open[1] and spread[1] > spreadAvg and averageSpreadTaken[1]
    topExhausted_1 := true

if close < open and open > close[1] and close < bodyMiddle[1] and close >= open[1]
    topExhausted_0 := true

if volume < volume[1] and volume < emaVol25
    topExhausted_volume := true   

topExhausted() => seb and topExhausted_volume and topExhausted_0 and topExhausted_1 and topExhausted_2

bool topExhausted2_1         = false
bool topExhausted2_0         = false
bool topExhausted2_volume    = false
bool topExhausted2_spread    = false
bool topExhausted2_hl    = false

if close[1] > open[1] and close[1] > close[2]
    topExhausted2_1 := true

if close < open and open < close[1] and close < (bodyHigh[1] - bodyLow[1])*2/3 + bodyLow[1] and close >= low[1] and spread > spreadAvg
    topExhausted2_0 := true

if volume > emaVol25 or volume[1] > emaVol25
    topExhausted2_volume := true   

if spread[1] > spreadAvg and (averageSpreadTaken[1] or (upShadow[1] > dnShadow[1] and upShadow[1] > averageTopWickSize))
    topExhausted2_spread := true

if firstPreviousBarIsHighestHigh or highestBarCheck()
    topExhausted2_hl := true 

topExhausted2() => seb and topExhausted2_volume and topExhausted2_0 and topExhausted2_1 and topExhausted2_spread and topExhausted2_hl

//=========================================================================|
//                    ADVANCE BLOCK/ STALLED PATTERN                       | 
//=========================================================================|
//bullish
bool bullishStalled_thirdBar      = false
bool bullishStalled_secondBar     = false
bool bullishStalled_firstBar      = false

if close[2] > open[2] and marubozuUpBar[2] and spread[2] > spreadAvg and range[2] > rangeAvg
    bullishStalled_thirdBar := true

if close[1] > open[1] and close[1] > close[2] and spread[1] < spread[2] and range[1] < range[2]
    bullishStalled_secondBar := true

if close > open and close > close[1] and close > open[3]  and spread < spread[1] and range < range[1] and smallBody
    bullishStalled_firstBar := true

bullishStalled() => ssp and bullishStalled_firstBar and bullishStalled_secondBar and bullishStalled_thirdBar

// bearish
bool bearishStalled_thirdBar      = false
bool bearishStalled_secondBar     = false
bool bearishStalled_firstBar      = false

if close[2] < open[2] and marubozuDnBar[2] and spread[2] > spreadAvg and range[2] > rangeAvg
    bearishStalled_thirdBar := true

if close[1] < open[1] and close[1] < close[2] and spread[1] < spread[2] and range[1] < range[2]
    bearishStalled_secondBar := true

if close < open and close < close[1] and close < open[3] and spread < spread[1] and range < range[1] and smallBody
    bearishStalled_firstBar := true

bearishStalled() => ssp and bearishStalled_thirdBar and bearishStalled_secondBar and bearishStalled_firstBar

// Advance Block
bool bullishAD_fourthBar     = false
bool bullishAD_thirdBar      = false
bool bullishAD_secondBar     = false
bool bullishAD_firstBar      = false

if close[3] > open[3] and averageSpreadTaken[3]
    bullishAD_fourthBar := true

if close[2] > open[2] and close[2] > close[3] and (spread[2] < spread[3] or range[2] < range[3])
    bullishAD_thirdBar := true

if close[1] > open[1] and spread[1] < spread[2] and range[1] < range[2]
    bullishAD_secondBar := true

if close > low[1] and spread <= spread[1] and range <= range[1] and smallBody
    bullishAD_firstBar := true

bullishAD() => ssp and bullishAD_firstBar and bullishAD_secondBar and bullishAD_thirdBar and bullishAD_fourthBar

bool bearishAD_fourthBar     = false
bool bearishAD_thirdBar      = false
bool bearishAD_secondBar     = false
bool bearishAD_firstBar      = false

if close[3] < open[3] and averageSpreadTaken[3]
    bearishAD_fourthBar := true
    
if close[2] < open[2] and close[2] < close[3] and (spread[2] < spread[3] or range[2] < range[3])
    bearishAD_thirdBar := true

if close[1] < open[1] and spread[1] < spread[2] and range[1] < range[2]
    bearishAD_secondBar := true

if close < high[1] and spread <= spread[1] and range <= range[1] and smallBody
    bearishAD_firstBar := true

bearishAD() => ssp and bearishAD_fourthBar and bearishAD_thirdBar and bearishAD_secondBar and bearishAD_firstBar

//=========================================================================|
//               REVERSE REJECTION/ INDECISION ZONE                        | 
//=========================================================================|
bool bearIZ_thirdBar       = false
bool bearIZ_secondBar      = false
bool bearIZ_firstBar       = false
bool bearIZ_currentBar     = false

if close[3] < open[3] and (dnShadow[3] > averageBottomWickSize or longBody[3]) and thirdPreviousBarIsLowestLow
    bearIZ_thirdBar := true

if close[2] <= open[2] and close[2] <= close[3] and close[2] > low[3] and high[2] < high[3]
    bearIZ_secondBar := true

if close[1] <= close[3] and close[1] > low[3] and low[1] > low[3] and high[1] < high[3]
    bearIZ_firstBar := true

if close < low[3] or (low < low[3] and close > low[1])
    bearIZ_currentBar := true

bearIZ() => siz and bearIZ_thirdBar and bearIZ_secondBar and bearIZ_firstBar and bearIZ_currentBar

bool bullIZ_thirdBar       = false
bool bullIZ_secondBar      = false
bool bullIZ_firstBar       = false
bool bullIZ_currentBar     = false

if close[3] > open[3] and (upShadow[3] > averageTopWickSize or longBody[3]) and thirdPreviousBarIsHighestLow
    bullIZ_thirdBar := true

if close[2] >= open[2] and close[2] >= close[3] and close[2] < high[3] and low[2] > low[3]
    bullIZ_secondBar := true

if close[1] >= open[2] and close[1] < high[3] and high[1] < high[3] and low[1] > low[3]
    bullIZ_firstBar := true

if close > high[3] or (high > high[3] and close < high[1])
    bullIZ_currentBar := true

bullIZ() => siz and bullIZ_thirdBar and bullIZ_secondBar and bullIZ_firstBar and bullIZ_currentBar

//=========================================================================|
//               BROADENING TRIANGLE                                       | 
//=========================================================================|
bool broTriangle_firstBar      = false
bool broTriangle_secondBar     = false

if range[1] > range[2] and high[1] > high[2] and low[1] < low[2]
    broTriangle_firstBar := true

if range > range[1] and high > high[1] and low < low[1]
    broTriangle_secondBar := true

broadeningTriangle() => sbt and broTriangle_secondBar and broTriangle_firstBar  

//=========================================================================|
//                     SYMMETRICAL TRIANGLE                                | 
//=========================================================================|
bool symTriangle_firstBar       = false
bool symTriangle_secondBar      = false
bool symTriangle_thirdBar       = false

if (range[2] > rangeAvg or spread[2] > spreadAvg) and not bigBody[2]
    symTriangle_firstBar := true

if high[1] < high[2] and low[1] > low[2] 
    symTriangle_secondBar := true

if high < high[1] and low > low[1] and close < high[1] and close > low[1] and spread < spreadAvg
    symTriangle_thirdBar := true

symmetricalTriangle() => sstr and symTriangle_firstBar and symTriangle_secondBar and symTriangle_thirdBar

//=========================================================================|
//                     SYMMETRICAL TRIANGLE BREAKOUT                       | 
//=========================================================================|
bool symBreakout_firstBar      = false
bool symBreakout_secondBar     = false
bool symBreakout_thirdBar      = false
bool symBreakout_fourthBar     = false
bool symBreakout_breakoutBar   = false

if spread[4] > spreadAvg and range[4] > rangeAvg
    symBreakout_firstBar := true

if high[3] < high[4] and low[3] > low[4] and spread[3] < spreadAvg
    symBreakout_secondBar := true

if high[2] < high[4] and low[2] > low[4] and spread[2] < spreadAvg
    symBreakout_thirdBar := true

if high[1] < high[2] and low[1] > low[2] and spread[1] < spreadAvg
    symBreakout_fourthBar := true

f_triangleBreakout(indexBreakout) =>
	_isUp               = close > open 
	_breakDirection     = _isUp ? close > close[indexBreakout] and close > open[indexBreakout] : close < close[indexBreakout] and close < open[indexBreakout]
    [_breakDirection]

[breakDirection]  = f_triangleBreakout(4)

if averageSpreadTaken and breakDirection
    symBreakout_breakoutBar := true 

symTriangleBreakout1() => sstr and symBreakout_firstBar and symBreakout_secondBar and symBreakout_thirdBar and symBreakout_fourthBar and symBreakout_breakoutBar

bool symBreakout2_firstBar      = false
bool symBreakout2_secondBar     = false
bool symBreakout2_breakoutBar   = false

if high[2] < high[3] and low[2] > low[3] and (spread[3] < spreadAvg or range[3] > rangeAvg)
    symBreakout2_secondBar := true

if high[1] <= high[2] and low[1] >= low[2]
    symBreakout2_firstBar := true

[breakDirection2]  = f_triangleBreakout(3)

if averageSpreadTaken and breakDirection2
    symBreakout2_breakoutBar := true 

symTriangleBreakout2() => sstr and symBreakout2_firstBar and symBreakout2_secondBar and symBreakout2_breakoutBar

//=========================================================================|
//                     RISING/FAILLING THREE                               | 
//=========================================================================|
bool rising3_1       = false
bool rising3_2       = false
bool rising3_3       = false
bool rising3_4       = false
bool rising3_reverse = false

if close[4] > open[4] and spread[4] > spreadAvg
    rising3_4 := true

if  close[3] < open[3] and close[3] > open[4] and close[3] < high[4] and range[3] < range[4] and spread[3] < spread[4]
    rising3_3 := true

if close[2] < high[4] and close[2] > low[4]
    rising3_2 := true

if close[1] < open[1] and low[1] < low[4]
    rising3_1 := true

if (close > open and closeAboveEMA25 and lowBelowEMA25) or doji or dragonflyDoji or gravestoneDoji
    rising3_reverse := true

risingThree() => srft and rising3_1 and rising3_2 and rising3_3 and rising3_4 and rising3_reverse

bool failling3_1       = false
bool failling3_2       = false
bool failling3_3       = false
bool failling3_4       = false
bool failling3_reverse = false

if close[4] < open[4] and spread[4] > spreadAvg 
    failling3_1 := true

if  close[3] > open[3] and close[3] > close[4] and close[3] > low[4] and range[3] < range[4] and spread[3] < spread[4]
    failling3_2 := true

if close[2] < high[4] and close[2] > low[4]
    failling3_3 := true

if close[1] > open[1] and high[1] > high[4]
    failling3_4 := true

if (close < open and closeBelowEMA25 and highAboveEMA25) or doji or gravestoneDoji
    failling3_reverse := true

faillingThree() => srft and failling3_1 and failling3_2 and failling3_3 and failling3_4 and failling3_reverse

//=========================================================================|
//                     COILING INSIDE BARS BREAK OUT                       | 
//=========================================================================|
// green - red - green 
thirdGRG()   => close[3] > open[3] ? 1 : 0
secondGRG()  => close[2] < open[2] and open[2] <= close[3] and close[2] >= open[3] ? 1 : 0
firstGRG()   => close[1] > open[1] and open[1] >= close[2] and close[1] <= open[2] ? 1 : 0

//green - red - red
thirdGRR()   => close[3] > open[3] ? 1 : 0
secondGRR()  => close[2] < open[2] and open[2] <= close[3] and close[2] >= open[3] ? 1 : 0
firstGRR()   => close[1] < open[1] and close[1] >= close[2] ? 1 : 0

//green - green - red
thirdGGR()   => close[3] > open[3] ? 1 : 0
secondGGR()  => close[2] > open[2] and close[2] <= close[3] and open[2] >= open[3] ? 1 : 0
firstGGR()   => close[1] < open[1] and close[1] >= open[1] and open[1] <= close[2]? 1 : 0

// red - green - red 
thirdRGR()   => close[3] < open[3] ? 1 : 0
secondRGR()  => close[2] > open[2] and open[2] >= close[3] and close[2] <= open[3] ? 1 : 0
firstRGR()   => close[1] < open[1] and open[1] <= close[2] and close[1] >= open[2] ? 1 : 0

// red - green - green
thirdRGG()   => close[3] < open[3] ? 1 : 0
secondRGG()  => close[2] > open[2] and open[2] >= close[3] and close[2] <= open[3] ? 1 : 0
firstRGG()   => close[1] > open[1] and close[1] <= close[2] ? 1 : 0

// red - red - green
thirdRRG()   => close[3] < open[3] ? 1 : 0
secondRRG()  => close[2] < open[2] and close[2] >= close[3] and open[2] <= open[3] ? 1 : 0
firstRRG()   => close[1] > open[1] and close[1] <= open[2] ? 1 : 0

grg  = sib and thirdGRG() and secondGRG() and firstGRG() 
grr  = sib and thirdGRR() and secondGRR() and firstGRR() 
ggr  = sib and thirdGGR() and secondGGR() and firstGGR() 
rgr  = sib and thirdRGR() and secondRGR() and firstRGR() 
rgg  = sib and thirdRGG() and secondRGG() and firstRGG() 
rrg  = sib and thirdRRG() and secondRRG() and firstRRG() 

//=========================================================================|
//                     FAKEY                                               | 
//=========================================================================|
// fakey shooting star
fakeyUpShadow = spread < spreadAvg and (upShadow >= spread*3 or upShadow >= wm*averageTopWickSize) and highestBarCheck() and upShadow > dnShadow*2
fakeyDnShadow = spread < spreadAvg and (dnShadow >= spread*3 or dnShadow >= wm*averageBottomWickSize) and lowestBarCheck() and upShadow*2 < dnShadow 

// green - red - shooting star
fakeyUp1_secondGreenBar()       => close[2] > open[2] ? 1 : 0
fakeyUp1_firstRedBar()          => close[1] <= open[1] and open[1] <= close[2] and close[1] >= open[2] ? 1 : 0 
fakeyUp1_shootingStarBar()      => close <= high[1] and close >= low[1] and fakeyUpShadow ? 1 : 0

fakey_up1 = sfk and fakeyUp1_secondGreenBar() and fakeyUp1_firstRedBar() and fakeyUp1_shootingStarBar() 

// green - green - shooting star
fakeyUp2_secondGreenBar()       => close[2] > open[2] and close[1] <= open[2] ? 1 : 0
fakeyU2_firstGreenBar()         => close[1] >= open[1] and close <= close[2] ? 1 : 0 
fakeyUp2_shootingStarBar()      => close <= high[1] and close >= low[1] and fakeyUpShadow ? 1 : 0
fakey_up2 = sfk and fakeyUp2_secondGreenBar() and fakeyU2_firstGreenBar() and fakeyUp2_shootingStarBar()

// red - green - shooting star
fakeyUp3_secondRedBar()    => close[2] < open[2] ? 1 : 0
fakeyUp3_firstGreenBar()   => close[1] >= open[1] and open[1] >= close[2] and close[1] <= open[2] ? 1 : 0
fakeyUp3_shootingStarBar() => close <= high[1] and close >= low[1] and fakeyUpShadow ? 1 : 0
//and close <= close[1] and close >= open[1]
fakey_up3 = sfk and fakeyUp3_secondRedBar() and fakeyUp3_firstGreenBar() and fakeyUp3_shootingStarBar()

// fakey hammer
// red - green - hammer
fakeyDown1_secondRedBar()  => close[2] < open[2] ? 1 : 0
fakeyDown1_firstGreenBar() => close[1] >= open[1] and close >= open[1] and open[1] >= close[2] and close[1] <= open[2] ? 1 : 0
fakeyDown1_hammerBar()     => close >= low[1] and close <= high[1] and fakeyDnShadow ? 1 : 0
fakey_down1 = sfk and fakeyDown1_secondRedBar() and fakeyDown1_firstGreenBar() and fakeyDown1_hammerBar() 

// green - red - hammer
fakeyDown2_secondGreenBar()  => close[2] > open[2] ? 1 : 0
fakeyDown2_firstRedBar()     => close[1] <= open[1] and open[1] <= close[2] and close[1] >= open[2] ? 1 : 0
fakeyDown2_hammerBar()       => close >= low[1] and close <= high[1] and fakeyDnShadow ? 1 : 0
fakey_down2 = sfk and fakeyDown2_secondGreenBar() and fakeyDown2_firstRedBar() and fakeyDown2_hammerBar()  

// red - red - hammer
fakeyDown3_secondRedBar() => close[2] < open[2] ? 1 : 0
fakeyDown3_firstRedBar()  => close[1] <= open[1] and open[1] >= close[2] and close[1] >= close[2] ? 1 : 0
fakeyDown3_hammerBar()    => close >= low[1] and close <= high[1] and fakeyDnShadow ? 1 : 0
fakey_down3 = sfk and fakeyDown3_secondRedBar() and fakeyDown3_firstRedBar() and fakeyDown3_hammerBar()

//=========================================================================|
//                     KANGAROO TAIL                                       | 
//=========================================================================|
// range > average range
// no space on the left
// not place right after marubozu bar
// close inside the range of previous bar
// shadow >= body*3
// close at 1/3 of the top or bottom
bool topKgr_wickVolatility          = false
bool topKgr_minimumWickLength       = false
bool topKgr_noSpaceOnTheLeft        = false
bool topKgr_closeNearBottom         = false
bool topKgr_closeInsidePreviousBar  = false
bool topKgr_biggerRangePreviousBar  = false

if range - range[1] >= 0
    topKgr_biggerRangePreviousBar := true

if upShadow >= spread * 3 
    topKgr_minimumWickLength := true

if close <= low + (high - low)/3 and open <= low + (high - low)/3
    topKgr_closeNearBottom := true

if spread > 0 and open <= high[1] and open >= low[1] and close < high[1] and close > low[1]
    topKgr_closeInsidePreviousBar := true

if upShadow >= 2 * averageTopWickSize and range > range[1]
    topKgr_wickVolatility := true

if highestBarCheck()
    topKgr_noSpaceOnTheLeft := true

topKangaroo() => skgr and topKgr_minimumWickLength and topKgr_closeNearBottom and topKgr_closeInsidePreviousBar and topKgr_biggerRangePreviousBar and topKgr_wickVolatility and topKgr_noSpaceOnTheLeft

bool bottomKgr_wickVolatility          = false
bool bottomKgr_minimumWickLength       = false
bool bottomKgr_noSpaceOnTheLeft        = false
bool bottomKgr_closeNearTop            = false
bool bottomKgr_closeInsidePreviousBar  = false
bool bottomKgr_biggerRangePreviousBar  = false

if range - range[1] >= 0
    bottomKgr_biggerRangePreviousBar := true

if dnShadow >= spread * 3
    bottomKgr_minimumWickLength := true

if close >= high - (high - low) / 3 and open >= high - (high - low) / 3 
    bottomKgr_closeNearTop := true

if spread > 0 and open <= high[1] and open >= low[1] and close < high[1] and close > low[1]
    bottomKgr_closeInsidePreviousBar := true

if dnShadow >= 2 * averageBottomWickSize and range > range[1]
    bottomKgr_wickVolatility := true

if lowestBarCheck()
    bottomKgr_noSpaceOnTheLeft := true

bottomKangaroo() => skgr and bottomKgr_biggerRangePreviousBar and bottomKgr_minimumWickLength and bottomKgr_closeNearTop and bottomKgr_closeInsidePreviousBar and bottomKgr_wickVolatility and bottomKgr_noSpaceOnTheLeft

//=========================================================================|
//                     ENGULFING                                           | 
//=========================================================================|
// white
bool whiteEng_fourth      = false
bool whiteEng_third       = false
bool whiteEng_second      = false
bool whiteEng_first       = false
bool whiteEng_engulfing   = false
bool whiteEng_lowest     = false
bool whiteEng_engulfing2  = false

if close[4] < open[4]
    whiteEng_fourth := true

if close[3] < open[3]
    whiteEng_third := true

if close[2] < open[2]
    whiteEng_second := true

if close[1] < open[1]
    whiteEng_first := true

if close > open[1] and spreadTakenByUpShadow() and (low > low[1] or low > low[2]) 
    whiteEng_engulfing := true

if firstPreviousBarIsLowestLow or secondPreviousBarIsLowestLow
    whiteEng_lowest := true

whiteEngulfing()  => senf and whiteEng_fourth and whiteEng_third and whiteEng_second and whiteEng_first and whiteEng_engulfing and whiteEng_lowest

if close > open[1] and spreadTakenByUpShadow() and dnShadow > averageBottomWickSize and low < low[1]
    whiteEng_engulfing2 := true

whiteEngulfing2() => senf and whiteEng_third and whiteEng_second and whiteEng_first and whiteEng_engulfing2 and lowestBarCheck()

// black
bool blackEng_fourth      = false
bool blackEng_third       = false
bool blackEng_second      = false
bool blackEng_first       = false
bool blackEng_engulfing   = false
bool blackEng_highest     = false
bool blackEng_engulfing2  = false

if close[4] > open[4]
    blackEng_fourth := true

if close[3] > open[3]
    blackEng_third := true

if close[2] > open[2]
    blackEng_second := true

if close[1] > open[1]
    blackEng_first := true

if close < open[1] and spreadTakenByDnShadow() and (high < high[1] or high < high[2])
    blackEng_engulfing := true

if firstPreviousBarIsHighestHigh or secondPreviousBarIsHighestHigh
    blackEng_highest := true

blackEngulfing() => senf and blackEng_fourth and blackEng_third and blackEng_second and blackEng_first and blackEng_engulfing and blackEng_highest

if close < open[1] and spreadTakenByDnShadow() and upShadow > averageTopWickSize and high > high[1]
    blackEng_engulfing2 := true

blackEngulfing2() => senf and blackEng_third and blackEng_second and blackEng_first and blackEng_engulfing2 and highestBarCheck()

//=========================================================================|
//                     THREE BAR REVERSAL                                  | 
//=========================================================================|
// middle bar can't be outsidebar
//  great combination of a head and shoulders formation and a three bar reversal pattern.

bool upT3R_first                = false
bool upT3R_second               = false
bool upT3R_third                = false

if close[2] < open[2]
    upT3R_third := true

if close[1] < high[2] and low[1] < low[2] and low[1] < low and firstPreviousBarIsLowestLow 
    upT3R_second := true

if close > high[1] and close >= high[2]
    upT3R_first := true

bullish3Reversal() => s3br and upT3R_first and upT3R_second and upT3R_third

bool dnT3R_first                = false
bool dnT3R_second               = false
bool dnT3R_third                = false

if close[2] > open[2]
    dnT3R_third := true

if close[1] > low[2] and high[1] > high[2] and high[1] > high and firstPreviousBarIsHighestHigh
    dnT3R_second := true

if close < low[1] and close <= low[2]
    dnT3R_first := true

bearish3Reversal() => s3br and dnT3R_first and dnT3R_second and dnT3R_third


//=========================================================================|
//                     NO SUPPLY/DEMAND                                    | 
//=========================================================================|
bool noDemand_up                = false
bool noDemand_down              = false
bool noDemand_volume            = false

if spread[1] > spreadAvg and close[1] > open[1] and upShadow > averageTopWickSize and highestBarCheck()
    noDemand_up := true

if close < open and high > high[1]
    noDemand_down := true

if volume > emaVol25 or volume[1] > emaVol25
    noDemand_volume := true 

noDemandBars() => snsd and noDemand_up and noDemand_down and noDemand_volume

bool noSupply_down        = false
bool noSupply_up          = false
bool noSupply_volume      = false

if spread[1] > spreadAvg and close[1] < open[1] and dnShadow > averageBottomWickSize and lowestBarCheck()
    noSupply_down := true

if close > open and low < low[1]
    noSupply_up := true

if volume > emaVol25 or volume[1] > emaVol25
    noSupply_volume := true 

noSupplyBars() => snsd and noSupply_down and noSupply_up and noSupply_volume

//=========================================================================|
//                   DECELERATION                                          | 
//=========================================================================|
bool dnDec_firstBar     = false
bool dnDec_secondBar    = false
bool dnDec_thirdBar     = false
bool dnDec_fourthBar    = false
[isProjectionGettingSmaller] = f_isProjectionGettingSmaller()

if close[3] < open[3] and spread[3] > spreadAvg 
    dnDec_fourthBar := true 

if close[2] < open[2] and low[2] < low[3]
    dnDec_thirdBar := true 

if close[1] < open[1] and low[1] < low[2]
    dnDec_secondBar := true 

if close > open and low < low[1]
    dnDec_firstBar := true 

sellingDeceleration() => std and dnDec_fourthBar and dnDec_thirdBar and dnDec_secondBar and dnDec_firstBar and isProjectionGettingSmaller

bool upDec_firstBar     = false
bool upDec_secondBar    = false
bool upDec_thirdBar     = false
bool upDec_fourthBar    = false

if close[3] > open[3] and spread[3] > spreadAvg 
    upDec_fourthBar := true 

if close[2] > open[2] and high[2] > high[3]
    upDec_thirdBar := true 

if close[1] > open[1] and high[1] > high[2]
    upDec_secondBar := true 

if close < open and high > high[1]
    upDec_firstBar := true 

buyingDeceleration() => std and upDec_fourthBar and upDec_thirdBar and upDec_secondBar and upDec_firstBar and isProjectionGettingSmaller

//=========================================================================|
//                   ANTI-CLIMAX                                           | 
//=========================================================================|
bool upAC_firstBar     = false
bool upAC_secondBar    = false
bool upAC_thirdBar     = false
bool upAC_fourthBar    = false
bool upAC_volume       = false
bool upAC_shadow       = false

[upLastProjectionIsBiggest] = f_upLastProjectionIsBiggest()

if close[3] > open[3] 
    upAC_fourthBar := true 

if close[2] > open[2] and high[2] > high[3]
    upAC_thirdBar := true 

if close[1] > open[1] and high[1] > high[2]
    upAC_secondBar := true 

if high > high[1]
    upAC_firstBar := true 

if volume[3] > emaVol25 or volume[2] > emaVol25 or volume[1] > emaVol25 or volume > emaVol25
    upAC_volume := true

if upShadow[1] > averageTopWickSize or upShadow > averageTopWickSize
    upAC_shadow := true

buyingAC() => sac and upAC_fourthBar and upAC_thirdBar and upAC_secondBar and upAC_firstBar and upAC_volume and upLastProjectionIsBiggest and upAC_shadow

bool dnAC_firstBar     = false
bool dnAC_secondBar    = false
bool dnAC_thirdBar     = false
bool dnAC_fourthBar    = false
bool dnAC_volume       = false
bool dnAC_shadow       = false

[dnLastProjectionIsBiggest] = f_dnLastProjectionIsBiggest()

if close[3] < open[3] 
    dnAC_fourthBar := true 

if close[2] < open[2] and low[2] < low[3]
    dnAC_thirdBar := true 

if close[1] < open[1] and low[1] < low[2]
    dnAC_secondBar := true 

if low < low[1]
    dnAC_firstBar := true 

if volume[3] > emaVol25 or volume[2] > emaVol25 or volume[1] > emaVol25 or volume > emaVol25
    dnAC_volume := true

if dnShadow[1] > averageBottomWickSize or dnShadow > averageBottomWickSize
    dnAC_shadow := true

sellingAC() => sac and dnAC_fourthBar and dnAC_thirdBar and dnAC_secondBar and dnAC_firstBar and dnAC_volume and dnLastProjectionIsBiggest and dnAC_shadow

//=========================================================================|
//                     PRESSURE INCREASE                                   | 
//=========================================================================|
// down shadow's getting longer
bool buyingPI_firstBar        = false
bool buyingPI_secondBar       = false
bool buyingPI_thirdBar        = false
bool buyingPI_closeAbove      = false
bool buyingPI_volume          = false

if close[2] < open[2] and dnShadow[2] > dnShadow[3] and low[2] < low[3]
    buyingPI_thirdBar := true 
 
if dnShadow[1] > dnShadow[2] and low[1] < low[2]
    buyingPI_secondBar := true 

if  dnShadow > averageBottomWickSize and dnShadow > dnShadow[1] and low < low[1]
    buyingPI_firstBar := true

if close[3] > open[3] 
    buyingPI_closeAbove := close[2] < open[3]

if close[3] < open[3] 
    buyingPI_closeAbove := close[2] < close[3]

if volume[2] > emaVol25 or volume[1] > emaVol25 or volume > emaVol25
    buyingPI_volume := true

buyingPI() => spi and buyingPI_firstBar and buyingPI_secondBar and buyingPI_thirdBar and buyingPI_closeAbove and buyingPI_volume and not closeAboveEMA25

// up shadow's getting longer
bool sellingPI_firstBar        = false
bool sellingPI_secondBar       = false
bool sellingPI_thirdBar        = false
bool sellingPI_closeAbove      = false
bool sellingPI_volume          = false

if close[2] > open[2] and upShadow[2] > upShadow[3] and high[2] > high[3]
    sellingPI_thirdBar := true 
 
if upShadow[1] > upShadow[2] and high[1] > high[2]
    sellingPI_secondBar := true 

if upShadow > averageTopWickSize and upShadow > upShadow[1] and high > high[1]
    sellingPI_firstBar := true

if close[3] < open[3] 
    sellingPI_closeAbove := close[2] > open[3]

if close[3] > open[3] 
    sellingPI_closeAbove := close[2] > close[3]

if volume[2] > emaVol25 or volume[1] > emaVol25 or volume > emaVol25
    sellingPI_volume := true

sellingPI() => spi and sellingPI_firstBar and sellingPI_secondBar and sellingPI_thirdBar and sellingPI_closeAbove and sellingPI_volume and not closeBelowEMA25

// down shadow's getting longer and up shadow's getting shorter
bool buyingPI2_firstBar        = false
bool buyingPI2_secondBar       = false
bool buyingPI2_thirdBar        = false

if close[2] < open[2]
    buyingPI2_thirdBar := true 
 
if close[1] < open[1] and dnShadow[1] > dnShadow[2] and upShadow[1] < upShadow[2]
    buyingPI2_secondBar := true 

if  dnShadow > dnShadow[1] and upShadow < upShadow[1]
    buyingPI2_firstBar := true

buyingPI2() => spi and buyingPI2_firstBar and buyingPI2_secondBar and buyingPI2_thirdBar and buyingPI_volume and not closeAboveEMA25

// up shadow's getting longer and down shadow's getting shorter
bool sellingPI2_firstBar        = false
bool sellingPI2_secondBar       = false
bool sellingPI2_thirdBar        = false

if close[2] > open[2] 
    sellingPI2_thirdBar := true 
 
if close[1] > open[1] and upShadow[1] > upShadow[2] and dnShadow[1] < dnShadow[2]
    sellingPI2_secondBar := true 

if upShadow > upShadow[1] and dnShadow < dnShadow[1]
    sellingPI2_firstBar := true

sellingPI2() => spi and sellingPI2_firstBar and sellingPI2_secondBar and sellingPI2_thirdBar and sellingPI_volume and not closeBelowEMA25

//=========================================================================|
//                     PRESSURE ZONE                                       | 
//=========================================================================|
//selling pressure zone
bool sellingPZ_firstBar        = false
bool sellingPZ_secondBar       = false
bool sellingPZ_thirdBar        = false
bool sellingPZ_highestBars     = false
bool sellingPZ_zone            = false
bool sellingPZ_longWick        = false
bool sellingPZ_notInsideBar    = false
bool sellingPZ_minimumPZ       = true

if upShadow[2] > dnShadow[2] and upShadow[2] > averageTopWickSize
    sellingPZ_thirdBar := true 
 
if close[1] < high[2]
    sellingPZ_secondBar := true 

if close < high[1] and close < high[2] and upShadow > averageTopWickSize
    sellingPZ_firstBar := true

if firstPreviousBarIsHighestHigh or secondPreviousBarIsHighestHigh or highestBarCheck()
    sellingPZ_highestBars := true 

if high > bodyHigh[2] and high > bodyHigh[1] and high[1] > bodyHigh[2]
    sellingPZ_zone := true

if upShadow[2] > averageTopWickSize*wm or upShadow[1] > averageTopWickSize*wm
    sellingPZ_longWick := true 
    
// specific handle middle bar can not close above 0.5 wick of first bar
if close[2] > open[2] and close[1] > open[1] and close[1] - open[1] > (high[2] - bodyHigh[2])/2
    sellingPZ_minimumPZ := false

sellingPZ() => spz and sellingPZ_firstBar and sellingPZ_secondBar and sellingPZ_thirdBar and sellingPZ_highestBars and sellingPZ_zone and sellingPZ_longWick and sellingPZ_minimumPZ

//buying pressure zone
bool buyingPZ_firstBar        = false
bool buyingPZ_secondBar       = false
bool buyingPZ_thirdBar        = false
bool buyingPZ_lowestBars      = false
bool buyingPZ_zone            = false
bool buyingPZ_longWick        = false
bool buyingPZ_minimumPZ       = true

if dnShadow[2] > upShadow[2] and dnShadow[2] > averageBottomWickSize
    buyingPZ_thirdBar := true 
 
if close[1] > low[2]
    buyingPZ_secondBar := true 

if  close > low[1] and close > low[2] and dnShadow > averageBottomWickSize
    buyingPZ_firstBar := true

if firstPreviousBarIsLowestLow or secondPreviousBarIsLowestLow or lowestBarCheck() 
    buyingPZ_lowestBars := true 

if low < bodyLow[2] and low < bodyLow[1] and low[1] < bodyLow[2]
    buyingPZ_zone := true

if dnShadow[2] > averageBottomWickSize*wm or dnShadow[1] > averageBottomWickSize*wm
    buyingPZ_longWick := true 

// specific handle middle bar can not close above 0.5 wick of first bar
if close[2] < open[2] and close[1] < open[1] and open[1] - close[1] > (bodyLow[2] - low[2])/2
    buyingPZ_minimumPZ := false

buyingPZ() => spz and buyingPZ_firstBar and buyingPZ_secondBar and buyingPZ_thirdBar and buyingPZ_lowestBars and buyingPZ_zone and buyingPZ_longWick and buyingPZ_minimumPZ

//=========================================================================|
//                     FORBIDDEN ZONE                                      | 
//=========================================================================|
//selling forbidden zone
bool sellingFZ_1       = false
bool sellingFZ_2       = false
bool sellingFZ_3       = false
bool sellingFZ_0       = false
bool sellingFZ_shadow  = false

if upShadow[3] > dnShadow[3] and upShadow[3] > averageTopWickSize and thirdPreviousBarIsHighestLow
    sellingFZ_3 := true 
 
if high[2] > bodyHigh[3] and close[2] <= bodyHigh[3] 
    sellingFZ_2 := true 

if high[1] > bodyHigh[3] and close[1] <= bodyHigh[3]
    sellingFZ_1 := true

if high > bodyHigh[3] and close <= bodyHigh[3]
    sellingFZ_0 := true 

if upShadow[3] > averageTopWickSize*2 or upShadow[2] > averageTopWickSize*2 or upShadow[1] > averageTopWickSize*2 or upShadow > averageTopWickSize*2 
    sellingFZ_shadow := true

sellingFZ() => sfz and sellingFZ_0 and sellingFZ_1 and sellingFZ_2 and sellingFZ_3 and sellingFZ_shadow

bool sellingFZ2_1       = false
bool sellingFZ2_2       = false
bool sellingFZ2_3       = false
bool sellingFZ2_4       = false
bool sellingFZ2_0       = false

[fourthPreviousBarIsHighestLow]    = f_isHighest(4, 5, pivotlbar + 5)
if upShadow[4] > dnShadow[4] and upShadow[4] > averageTopWickSize and fourthPreviousBarIsHighestLow
    sellingFZ2_4 := true 
 
if high[3] > bodyHigh[4] and close[3] < (high[4] - bodyHigh[4])/2 + bodyHigh[4] 
    sellingFZ2_3 := true 

if high[2] > bodyHigh[4] and close[2] < (high[4] - bodyHigh[4])/2 + bodyHigh[4]
    sellingFZ2_2 := true

if high[1] > bodyHigh[4] and close[1] < (high[4] - bodyHigh[4])/2 + bodyHigh[4]
    sellingFZ2_1 := true

if high > bodyHigh[4] and close < (high[4] - bodyHigh[4])/2 + bodyHigh[4]
    sellingFZ2_0 := true 

sellingFZ2() => sfz and sellingFZ2_0 and sellingFZ2_1 and sellingFZ2_2 and sellingFZ2_3 and sellingFZ2_4 and upShadow[4] < averageTopWickSize*wm

//buying forbidden zone
bool buyingFZ_1       = false
bool buyingFZ_2       = false
bool buyingFZ_3       = false
bool buyingFZ_0       = false
bool buyingFZ_shadow  = false

if upShadow[3] < dnShadow[3] and dnShadow[3] > averageBottomWickSize and thirdPreviousBarIsLowestLow
    buyingFZ_3 := true 
 
if low[2] < bodyLow[3] and close[2] >= bodyLow[3]
    buyingFZ_2 := true 

if low[1] < bodyLow[3] and close[1] >= bodyLow[3]
    buyingFZ_1 := true

if low < bodyLow[3] and close >= bodyLow[3]
    buyingFZ_0 := true 

if dnShadow[3] > averageBottomWickSize*2 or dnShadow[2] > averageBottomWickSize*2 or dnShadow[1] > averageBottomWickSize*2 or dnShadow > averageBottomWickSize*2 
    buyingFZ_shadow := true

buyingFZ() => sfz and buyingFZ_0 and buyingFZ_1 and buyingFZ_2 and buyingFZ_3 and buyingFZ_shadow

bool buyingFZ3_1       = false
bool buyingFZ3_2       = false
bool buyingFZ3_3       = false
bool buyingFZ3_4       = false
bool buyingFZ3_0       = false

[fourthPreviousBarIsLowestLow]   = f_isLowest(4, 5, pivotlbar + 5)
if upShadow[4] < dnShadow[4] and dnShadow[4] > averageBottomWickSize and fourthPreviousBarIsLowestLow
    buyingFZ3_4 := true 
 
if low[3] < bodyLow[4] and close[3] > bodyLow[4] - ((bodyLow[4] - low[4])/2)
    buyingFZ3_3 := true 

if low[2] < bodyLow[4] and close[2] > bodyLow[4] - ((bodyLow[4] - low[4])/2)
    buyingFZ3_2 := true

if low[1] < bodyLow[4] and close[1] > bodyLow[4] - ((bodyLow[4] - low[4])/2)
    buyingFZ3_1 := true

if low < bodyLow[4] and close > bodyLow[4] - ((bodyLow[4] - low[4])/2)
    buyingFZ3_0 := true 

buyingFZ2() => sfz and buyingFZ3_0 and buyingFZ3_1 and buyingFZ3_2 and buyingFZ3_3 and buyingFZ3_4 and dnShadow[4] < averageBottomWickSize*wm

//=========================================================================|
//                     CONGESTION ZONE BREAK                               | 
//=========================================================================|
congestionZone_4pi()   => range[4] > rangeAvg or averageSpreadTaken[4] ? 1 : 0
congestionZone_3()     => close[3] <= high[4] and close[3] >= low[4]   ? 1 : 0
congestionZone_2()     => close[2] <= high[3] and close[2] >= low[3]   ? 1 : 0
congestionZone_1()     => close[1] <= high[2] and close[1] >= low[2]   ? 1 : 0
congestionZone_0br()   => close < low[1] or close > high[1]            ? 1 : 0

congZoneBreakout4  = scz and congestionZone_4pi() and congestionZone_3() and congestionZone_2() and congestionZone_1() and congestionZone_0br() 

congestionZone_4()     => close[4] <= high[5] and close[4] >= low[5]   ? 1 : 0
congestionZone_5pi()   => range[5] > rangeAvg or averageSpreadTaken[5] ? 1 : 0

congZoneBreakout6  = scz and congestionZone_5pi() and congestionZone_4() and congestionZone_3() and congestionZone_2() and congestionZone_1() and congestionZone_0br() 

congestionZone_8pi()   => range[8] > rangeAvg or averageSpreadTaken[8] ? 1 : 0
congestionZone_7()     => close[7] <= high[8] and close[7] >= low[8]   ? 1 : 0
congestionZone_6()     => close[6] <= high[7] and close[6] >= low[7]   ? 1 : 0
congestionZone_5()     => close[5] <= high[6] and close[5] >= low[6]   ? 1 : 0

congZoneBreakout8  = scz and congestionZone_8pi() and congestionZone_7() and congestionZone_6() and congestionZone_5() and congestionZone_4() and congestionZone_3() and congestionZone_2() and congestionZone_1() and congestionZone_0br() 

//=========================================================================|
//                     NR7                                                 | 
//=========================================================================|
nr7_5()   =>  close[5] < high[6] and close[5] > low[6] ? 1 : 0
nr7_4()   =>  close[4] < high[5] and close[4] > low[5] ? 1 : 0
nr7_3()   =>  close[3] < high[4] and close[3] > low[4] ? 1 : 0
nr7_2()   =>  close[2] < high[3] and close[2] > low[3] ? 1 : 0
nr7_1()   =>  close[1] < high[2] and close[1] > low[2] ? 1 : 0
nr7_0()   =>  range < range[6] and range < range[5] and range < range[4] and range < range[3] and range < range[2] and range < range[1] ? 1 : 0

nr7 = snr7 and nr7_5() and nr7_4() and nr7_3() and nr7_2() and nr7_1() and nr7_0() 

//=========================================================================|
//                     FALSE BREAKOUT                                      | 
//=========================================================================|
bearTrap_trapBar()      => close[1] < open[1] and volume[1] < emaVol25  ? 1 : 0
bearTrap_reverseBar()   => close > open and ((close > open[1] and volume > volume[1]) or (close > bodyMiddle[1] and (volume > emaVol25 or volume > volume[1])))         ? 1 : 0

bearTrap  = sfb and bearTrap_trapBar() and bearTrap_reverseBar()

bullTrap_trapBar()      => close[1] > open[1] and volume[1] < emaVol25  ? 1 : 0
bullTrap_reverseBar()   => close < open and ((close < open[1] and volume > volume[1]) or (close < bodyMiddle[1] and (volume > emaVol25 or volume > volume[1])))         ? 1 : 0

bullTrap  = sfb and bullTrap_trapBar() and bullTrap_reverseBar()

//=========================================================================|
//                     STAIR STEP                                          | 
//=========================================================================|
// green - red - green - red - ?
upSS_3()     => close[3] > open[3] and averageSpreadTaken[3]  ? 1 : 0
upSS_2()     => close[2] < open[2] and averageSpreadTaken[2]  ? 1 : 0
upSS_1()     => close[1] > open[1] and averageSpreadTaken[1]  ? 1 : 0
upSS_0()     => close < open and averageSpreadTaken           ? 1 : 0

upStairStep = sss and upSS_3() and upSS_2() and upSS_1() and upSS_0()

// red - green - red - green - ?
dnSS_3()     => close[3] < open[3] and averageSpreadTaken[3] ? 1 : 0
dnSS_2()     => close[2] > open[2] and averageSpreadTaken[2] ? 1 : 0
dnSS_1()     => close[1] < open[1] and averageSpreadTaken[1] ? 1 : 0
dnSS_0()     => close > open and averageSpreadTaken          ? 1 : 0

dnStairStep = sss and dnSS_3() and dnSS_2() and dnSS_1() and dnSS_0()

//=========================================================================|
//                     MOMENTUM SLOW DOWN                                  | 
//=========================================================================|
sellingMSD_3()     => close[3] < open[3] ? 1 : 0
sellingMSD_2()     => close[2] < open[2] and spread[2] < spread[3] ? 1 : 0
sellingMSD_1()     => close[1] < open[1] and spread[1] < spread[2] ? 1 : 0
sellingMSD_0()     => close < open and (spread < spread[1] or spread < spread[2]) ? 1 : 0

sellingMSD = smld and sellingMSD_3() and sellingMSD_2() and sellingMSD_1() and sellingMSD_0()

buyingMSD_3()     => close[3] > open[3] ? 1 : 0
buyingMSD_2()     => close[2] > open[2] and spread[2] < spread[3] ? 1 : 0
buyingMSD_1()     => close[1] > open[1] and spread[1] < spread[2] ? 1 : 0
buyingMSD_0()     => close > open and (spread < spread[1] or spread < spread[2]) ? 1 : 0

buyingMSD = smld and buyingMSD_3() and buyingMSD_2() and buyingMSD_1() and buyingMSD_0()

//=========================================================================|
//                     MOMENTUM SPEED UP                                   | 
//=========================================================================|
sellingSU_3()     => close[3] < open[3] ? 1 : 0
sellingSU_2()     => close[2] < open[2] and spread[2] > spread[3] ? 1 : 0
sellingSU_1()     => close[1] < open[1] and spread[1] > spread[2] ? 1 : 0
sellingSU_0()     => close < open and (spread > spread[1] or spread > spread[2]) ? 1 : 0

sellingSU = smsu and sellingSU_3() and sellingSU_2() and sellingSU_1() and sellingSU_0()

buyingSU_3()     => close[3] > open[3] ? 1 : 0
buyingSU_2()     => close[2] > open[2] and spread[2] > spread[3] ? 1 : 0
buyingSU_1()     => close[1] > open[1] and spread[1] > spread[2] ? 1 : 0
buyingSU_0()     => close > open and (spread > spread[1] or spread > spread[2]) ? 1 : 0

buyingSU = smsu and buyingSU_3() and buyingSU_2() and buyingSU_1() and buyingSU_0()

//=========================================================================|
//                    MOMENTUM PAUSE                                       | 
//=========================================================================|
bullMP_4()     => close[4] > open[4]  ? 1 : 0
bullMP_3()     => low[3] > low[4] and high[3] > high[4] ? 1 : 0
bullMP_2()     => low[2] > low[3] and high[2] > high[3] ? 1 : 0
bullMP_1()     => close[1] > open[1] and low[1] > low[2] and high[1] > high[2] ? 1 : 0
bullMP_pause() => close <= low[1] and low < low[1] ? 1 : 0

bullMP = smp and bullMP_4() and bullMP_3() and bullMP_2() and bullMP_1() and bullMP_pause() and closeAboveEMA25

bearMP_4()     => close[4] < open[4]  ? 1 : 0
bearMP_3()     => low[3] < low[4] and high[3] < high[4] ? 1 : 0
bearMP_2()     => low[2] < low[3] and high[2] < high[3] ? 1 : 0
bearMP_1()     => close[1] < open[1] and low[1] < low[2] and high[1] < high[2] ? 1 : 0
bearMP_pause() => close >= high[1] and high > high[1] ? 1 : 0

bearMP = smp and bearMP_4() and bearMP_3() and bearMP_2() and bearMP_1() and bearMP_pause() and closeBelowEMA25

//=========================================================================|
//                    TREND BAR                                            | 
//=========================================================================|
bullTB_2()     => close[2] > open[2] and averageSpreadTaken[2] ? 1 : 0
bullTB_1()     => close[1] > open[1] and close[1] >= close[2] and averageSpreadTaken[1] ? 1 : 0
bullTB_0()     => close > open and close >= close[1] and averageSpreadTaken ? 1 : 0

bullTB = stb and bullTB_2() and bullTB_1() and bullTB_0()

bearTB_3()     => close[2] < open[2] and averageSpreadTaken[2] ? 1 : 0
bearTB_2()     => close[1] < open[1] and close[1] <= close[2] and averageSpreadTaken[1] ? 1 : 0
bearTB_1()     => close < open and close <= close[1] and averageSpreadTaken ? 1 : 0

bearTB = stb and bearTB_3() and bearTB_2() and bearTB_1() 

//=========================================================================|
//                    OO                                                   | 
//=========================================================================|
// green - red
OO_1()  => close[1] > high[2] and low[1] < low[2] ? 1 : 0
OO_0()  => high > high[1] and close < low[1] ? 1 : 0

OO = soo and OO_1() and OO_0()

// red - green
OO1_1()  => high[1] > high[2] and close[1] < low[2] ? 1 : 0
OO1_0()  => close > high[1] and low < low[1] ? 1 : 0

OO1 = soo and OO1_1() and OO1_0()

//=========================================================================|
//                    IOI                                                  | 
//=========================================================================|
IOI_2()  => close[2] < close[3] and close[2] > open[3] ? 1 : 0
IOI_1()  => (close[1] > high[2] and low[1] < low[2]) or (high[1] > high[2] and close[1] < low[2]) ? 1 : 0
IOI_0()  => close < close[1] and close > open[1] ? 1 : 0

IOI = sioi and IOI_2() and IOI_1() and IOI_0()

//=========================================================================|
//                    HIKKAKE PATTERN                                      | 
//=========================================================================|
bullHK_5()           => close[5] < open[5]  ? 1 : 0
bullHK_4inside()     => close[4] > open[4] and close[4] <= open[5] and close[4] >= close[5] and low[4] > low[5] and high[4] < high[5]  ? 1 : 0
bullHK_3()           => close[3] < low[5]   ? 1 : 0
bullHK_2()           => close[2] < close[3] ? 1 : 0
bullHK_1()           => close[1] > open[1]  ? 1 : 0
bullHK_reverse()     => close > close[1]    ? 1 : 0

bullHK = shk and bullHK_5() and bullHK_4inside() and bullHK_3() and bullHK_2() and bullHK_1() and bullHK_reverse()

bullHK2_5()           => close[5] < open[5]  ? 1 : 0
bullHK2_4inside()     => close[4] > open[4] and close[4] <= open[5] and close[4] >= close[5] and low[4] > low[5] and high[4] < high[5]  ? 1 : 0
bullHK2_3()           => close[3] < low[5]   ? 1 : 0
bullHK2_2()           => close[2] > open[2] ? 1 : 0
bullHK2_1()           => close[1] > open[1]  ? 1 : 0
bullHK2_reverse()     => close > high[4]    ? 1 : 0

bullHK2 = shk and bullHK2_5() and bullHK2_4inside() and bullHK2_3() and bullHK2_2() and bullHK2_1() and bullHK2_reverse()
//--------------
bearHK_5()           => close[5] > open[5]  ? 1 : 0
bearHK_4inside()     => close[4] < open[4] and close[4] >= open[5] and close[4] <= close[5] and low[4] > low[5] and high[4] < high[5]  ? 1 : 0
bearHK_3()           => close[3] > high[5]  ? 1 : 0
bearHK_2()           => close[2] > close[3] ? 1 : 0
bearHK_1()           => close[1] < open[1]  ? 1 : 0
bearHK_reverse()     => close < close[1]    ? 1 : 0

bearHK = shk and bearHK_5() and bearHK_4inside() and bearHK_3() and bearHK_2() and bearHK_1() and bearHK_reverse()

bearHK2_5()           => close[5] > open[5]  ? 1 : 0
bearHK2_4inside()     => close[4] < open[4] and close[4] >= open[5] and close[4] <= close[5] and low[4] > low[5] and high[4] < high[5]  ? 1 : 0
bearHK2_3()           => close[3] > high[5]  ? 1 : 0
bearHK2_2()           => close[2] < open[2]  ? 1 : 0
bearHK2_1()           => close[1] < open[1]  ? 1 : 0
bearHK2_reverse()     => close < low[4]      ? 1 : 0

bearHK2 = shk and bearHK2_5() and bearHK2_4inside() and bearHK2_3() and bearHK2_2() and bearHK2_1() and bearHK2_reverse()

//=========================================================================|
//                    GAP                                      | 
//=========================================================================|

// bull_firstBar()  => close[1] > open[1] ? 1 : 0
// bull_gapBar()    => open > close[1] and close > open  ? 1 : 0
// bear_firstBar()  => close[1] < open[1]     ? 1 : 0
// bear_gapBar()    => open < close[1] and close < open ? 1 : 0

// bullGap = sgtb and bull_firstBar() and bull_gapBar() 
// bearGap = sgtb and bear_firstBar() and bear_gapBar() 

// continuation gap
bullGapContinuation_firstBar()  => close[1] > open[1] and spread[1] < spreadAvg and spread[1] < spread and smallSpreadTaken[1] ? 1 : 0
bullGapContinuation_gap()       => open > close[1] and close > open and close > high[1] and closeBelowEMA200                   ? 1 : 0
bullGapContinuation_volume()    => volume[1] < emaVol25 and (volume > volume[1] or volume > emaVol25)                          ? 1 : 0

bullGapContinuation = sgtb and bullGapContinuation_firstBar() and bullGapContinuation_gap() and bullGapContinuation_volume()

bearGapContinuation_firstBar()  => close[1] < open[1] and spread[1] < spreadAvg and spread[1] < spread and smallSpreadTaken[1] ? 1 : 0
bearGapContinuation_gap()       => open < close[1] and close < open and close < low[1] and closeAboveEMA200                    ? 1 : 0
bearGapContinuation_volume()    => volume[1] < emaVol25 and (volume > volume[1] or volume > emaVol25)                          ? 1 : 0

bearGapContinuation = sgtb and bearGapContinuation_firstBar() and bearGapContinuation_gap() and bearGapContinuation_volume() 

// gap at extreme
bullGapExtreme_firstBar()  => close[1] > open[1] and (spread[1] > spreadAvg or range[1] > rangeAvg)         ? 1 : 0
bullGapExtreme_gap()       => open > close[1] and close > open and close > high[1] and not marubozuUpBar    ? 1 : 0
bullGapExtreme_wick()      => upShadow > dnShadow and highestBarCheck() and upShadow > averageTopWickSize   ? 1 : 0
bullGapExtreme_volume()    => volume > volume[1] and volume > emaVol25                                      ? 1 : 0
bullGapExtreme_position()  => closeAboveEMA25                                                               ? 1 : 0

bullGapExtreme = sgtb and bullGapExtreme_firstBar() and bullGapExtreme_gap() and bullGapExtreme_wick() and bullGapExtreme_volume() and bullGapExtreme_position()

bearGapExtreme_firstBar()  => close[1] < open[1] and (spread[1] > spreadAvg or range[1] > rangeAvg)           ? 1 : 0
bearGapExtreme_gap()       => open < close[1] and close < open and not marubozuDnBar                                                ? 1 : 0
bearGapExtreme_wick()      => dnShadow > upShadow and lowestBarCheck() and dnShadow > averageTopWickSize      ? 1 : 0
bearGapExtreme_volume()    => volume > volume[1] and volume > emaVol25                                        ? 1 : 0
bearGapExtreme_position()  => closeBelowEMA25                                                                 ? 1 : 0

bearGapExtreme = sgtb and bearGapExtreme_firstBar() and bearGapExtreme_gap() and bearGapExtreme_wick() and bearGapExtreme_volume() and bearGapExtreme_position()

//=====================================================================================================================================================|
patternLabelPosLow = low - (atr(30) * 0.6)
patternLabelPosHigh = high + (atr(30) * 0.6)
labelPosition = close > open ? patternLabelPosLow : patternLabelPosHigh
labelStyle = close > open ? label.style_label_up : label.style_label_down

// Inside bars break out
barcolor((grg or ggr or grr or rgr or rgg or rrg) and (close > high[1] or close < low[1]) ? color_breakout : na)

// Exhausted bar
barcolor(bottomExhausted() or topExhausted() or bottomExhausted2() or topExhausted2() ? color_reverse : na)

// Gap
// barcolor(bearGap or bullGap ? color_breakout : na)

//Forbidden zone 
if sellingFZ()
    line.new(x1 = bar_index[3], y1 = bodyHigh[3], x2 = bar_index, y2 = bodyHigh[3], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[3], y1 = high[3], x2 = bar_index, y2 = high[3], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[3], y1 = bodyHigh[3], x2 = bar_index[3], y2 = high[3], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index, y1 = bodyHigh[3], x2 = bar_index, y2 = high[3], color = color.orange, style = line.style_solid)

if sellingFZ2()
    line.new(x1 = bar_index[4], y1 = bodyHigh[4], x2 = bar_index, y2 = bodyHigh[4], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[4], y1 = high[4], x2 = bar_index, y2 = high[4], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[4], y1 = bodyHigh[4], x2 = bar_index[4], y2 = high[4], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index, y1 = bodyHigh[4], x2 = bar_index, y2 = high[4], color = color.orange, style = line.style_solid)
    var ttSFZ = "Forbidden zone. Many attempted to break this zone but failed. They might still be stuck there"
    label.new(bar_index, patternLabelPosHigh, text="FZ", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttSFZ)

if buyingFZ()
    line.new(x1 = bar_index[3], y1 = bodyLow[3], x2 = bar_index, y2 = bodyLow[3], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[3], y1 = low[3], x2 = bar_index, y2 = low[3], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[3], y1 = bodyLow[3], x2 = bar_index[3], y2 = low[3], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index, y1 = bodyLow[3], x2 = bar_index, y2 = low[3], color = color.orange, style = line.style_solid)

if buyingFZ2()
    line.new(x1 = bar_index[4], y1 = bodyLow[4], x2 = bar_index, y2 = bodyLow[4], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[4], y1 = low[4], x2 = bar_index, y2 = low[4], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index[4], y1 = bodyLow[4], x2 = bar_index[4], y2 = low[4], color = color.orange, style = line.style_solid)
    line.new(x1 = bar_index, y1 = bodyLow[4], x2 = bar_index, y2 = low[4], color = color.orange, style = line.style_solid)
    var ttBFZ = "Forbidden zone. Many attempted to break this zone but failed. They might still be stuck there"
    label.new(bar_index, patternLabelPosLow, text="FZ", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttBFZ)

// Congestion zone
barcolor(congZoneBreakout4 or congZoneBreakout6 or congZoneBreakout8 ? color_breakout : na)

// rising/failling three
barcolor(risingThree() or bullTB ? color_bu_momentum : na)
barcolor(risingThree() or bearTB ? color_be_momentum : na, offset=-1)
barcolor(risingThree() or bearTB ? color_be_momentum : na, offset=-2)
barcolor(risingThree() ? color_be_momentum : na, offset=-3)
barcolor(risingThree() ? color_bu_momentum : na, offset=-4)

barcolor(faillingThree() or bearTB ? color_be_momentum : na)
barcolor(faillingThree() or bullTB ? color_bu_momentum : na, offset=-1)
barcolor(faillingThree() or bullTB ? color_bu_momentum : na, offset=-2)
barcolor(faillingThree() ? color_bu_momentum : na, offset=-3)
barcolor(faillingThree() ? color_be_momentum : na, offset=-4)

//Triangle 
barcolor(symTriangleBreakout1() or symTriangleBreakout2() ? color_breakout : na)

// Engulfing
barcolor(whiteEngulfing() or whiteEngulfing2() or blackEngulfing() or blackEngulfing2() or noSupplyBars() or noDemandBars() ? color_reverse : na)

barcolor((congZoneBreakout4[1] or congZoneBreakout6[1] or congZoneBreakout8) and close > open and bearTrap ? color_reverse : na)
barcolor((congZoneBreakout4[1] or congZoneBreakout6[1] or congZoneBreakout8) and close < open and bullTrap ? color_reverse : na)

// Kangaroo + Fakey
barcolor(fakey_up1 or fakey_up2 or fakey_up3 or fakey_down1 or fakey_down2 or fakey_down3 or topKangaroo() or bottomKangaroo() ? color_pinbar : na)

//Pinbar
// barcolor(spb and (bullishPinbar or bearishPinbar) and closeInsidePreviousBar and range > range[1]*0.7 ? color_pinbar : na)

//Stalled pattern + Advance block + Deceleration + Anti Climax
if bullishAD()
    var ttADBottom = "An advance block is a fourth-period candlestick pattern considered to forecast a reversal"
    label.new(bar_index, patternLabelPosHigh, text="AD", style=label.style_label_down, color = color.blue, textcolor=color.white, tooltip = ttADBottom)

if buyingDeceleration()
    var ttDecTop = "A > B > C"
    label.new(bar_index, patternLabelPosHigh, text="DC", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttDecTop)

if buyingAC()
    var ttATTop = "A < B < C"
    label.new(bar_index, patternLabelPosHigh, text="AC", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttATTop)

if bearishAD()
    var ttADTop = "An advance block is a fourth-period candlestick pattern considered to forecast a reversal"
    label.new(bar_index, patternLabelPosLow, text="AD", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttADTop)

if sellingDeceleration()
    var ttDecBottom = "A < B < C"
    label.new(bar_index, patternLabelPosLow, text="DC", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttDecBottom)

if sellingAC()
    var ttATBottom = "A < B < C"
    label.new(bar_index, patternLabelPosLow, text="AC", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttATBottom)

//Pressure Zone + Three Bar Reversal
plotshape(buyingPZ() or bullish3Reversal(), color=color.gray, style=shape.arrowup, location=location.belowbar, size=size.tiny)
plotshape(buyingPZ() or bullish3Reversal(), color=color.gray, style=shape.arrowup, location=location.belowbar, size=size.tiny, offset=-1)
plotshape(buyingPZ() or bullish3Reversal(), color=color.gray, style=shape.arrowup, location=location.belowbar, size=size.tiny, offset=-2)

plotshape(sellingPZ() or bearish3Reversal(), color=color.gray, style=shape.arrowdown, location=location.abovebar, size=size.tiny)
plotshape(sellingPZ() or bearish3Reversal(), color=color.gray, style=shape.arrowdown, location=location.abovebar, size=size.tiny, offset=-1)
plotshape(sellingPZ() or bearish3Reversal(), color=color.gray, style=shape.arrowdown, location=location.abovebar, size=size.tiny, offset=-2)

// Momentum Slow Down
if sellingMSD
    var ttSMSD = "Bearish momentum slow down"
    label.new(bar_index, patternLabelPosLow, text="SSD", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttSMSD)

if buyingMSD
    var ttBMSD = "Bullish momentum slow down"
    label.new(bar_index, patternLabelPosHigh, text="BSD", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttBMSD)

// Momentum Speed up
if buyingSU
    var ttSMSU = "Bullish momentum speed up"
    label.new(bar_index, patternLabelPosLow, text="BSU", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttSMSU)

if sellingSU
    var ttBMSU = "Bearish momentum speed up"
    label.new(bar_index, patternLabelPosHigh, text="SSU", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttBMSU)

// Momentum Pause
if bullMP
    var ttUMP = "Bullish momentum pause"
    label.new(bar_index, patternLabelPosHigh, text="MP", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttUMP)

if bearMP
    var ttDMP = "Bearish momentum pause"
    label.new(bar_index, patternLabelPosLow, text="MP", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttDMP)

// Tweezer Top/Bottom
if twTop()
    var ttBearishTweezerTop = "Tweezer Top\nTweezer Top is a two-candle pattern that signifies a potential bearish reversal. The pattern is found during an uptrend. The first candle is long and green, the second candle is red, and its high is nearly identical to the high of the previous candle. The virtually identical highs, together with the inverted directions, hint that bears might be taking over the market."
    label.new(bar_index, patternLabelPosHigh, text="TT", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttBearishTweezerTop)

if twBottom()
    var ttBullishTweezerBottom = "Tweezer Bottom\nTweezer Bottom is a two-candle pattern that signifies a potential bullish reversal. The pattern is found during a downtrend. The first candle is long and red, the second candle is green, its lows nearly identical to the low of the previous candle. The virtually identical lows together with the inverted directions hint that bulls might be taking over the market."
    label.new(bar_index, patternLabelPosLow, text="TB", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttBullishTweezerBottom)

// Hikkake
if bearHK or bearHK
    var ttTHK = "The hikkake pattern is a complex bar or candle pattern that begins to move in one direction but reverses quickly and is said to establish a forecast for a move in the opposite direction"
    label.new(bar_index, patternLabelPosHigh, text="HK", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttTHK)

if bullHK or bullHK2
    var ttBHK = "The hikkake pattern is a complex bar or candle pattern that begins to move in one direction but reverses quickly and is said to establish a forecast for a move in the opposite direction"
    label.new(bar_index, patternLabelPosLow, text="HK", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttBHK)

// Spinning Top
if sst and spinningTopWhite and (volume > emaVol25 or volume > volume[1]) and (highestBarCheck() or lowestBarCheck())
    var ttSTW = "The candlestick pattern represents indecision about the future direction of the asset. It means that neither buyers nor sellers could gain the upper hand"
    label.new(bar_index, patternLabelPosHigh, text="STW", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttSTW)

if sst and spinningTopBlack and (volume > emaVol25 or volume > volume[1]) and (highestBarCheck() or lowestBarCheck())
    var ttSTB = "The candlestick pattern represents indecision about the future direction of the asset. It means that neither buyers nor sellers could gain the upper hand"
    label.new(bar_index, patternLabelPosLow, text="STB", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttSTB)

// Gap Continuation
if bearGapContinuation
    var ttBGC = "Gap results in the price opening significantly higher or lower than the previous day’s closing price"
    label.new(bar_index, patternLabelPosHigh, text="GC", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttBGC)

if bullGapContinuation
    var ttSGC = "Gap results in the price opening significantly higher or lower than the previous day’s closing price"
    label.new(bar_index, patternLabelPosLow, text="GC", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttSGC)

// Gap at Extreme
if bullGapExtreme
    var ttBGR = "Gap results in the price opening significantly higher or lower than the previous day’s closing price"
    label.new(bar_index, patternLabelPosHigh, text="GE", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttBGR)

if bearGapExtreme
    var ttSGR = "Gap results in the price opening significantly higher or lower than the previous day’s closing price"
    label.new(bar_index, patternLabelPosLow, text="GE", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttSGR)

// Pressure Increase
if sellingPI()
    var ttSPI = "Selling Pressure Increase. Up Shadow's getting longer"
    label.new(bar_index, patternLabelPosHigh, text="SPI", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttSPI)

if sellingPI2()
    var ttSPI2 = "Selling Pressure Increase. Up Shadow's getting longer and Down Shadow's getting shorter"
    label.new(bar_index, patternLabelPosHigh, text="SPI", style=label.style_label_down, color = color.red, textcolor=color.white, tooltip = ttSPI2)

if buyingPI()
    var ttBPI = "Buying Pressure Increase. Down Shadow's getting longer"
    label.new(bar_index, patternLabelPosLow, text="BPI", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttBPI)

if buyingPI2()
    var ttBPI2 = "Buying Pressure Increase. Down Shadow's getting longer and Up Shadow's getting shorter"
    label.new(bar_index, patternLabelPosLow, text="BPI", style=label.style_label_up, color = color.blue, textcolor=color.white, tooltip = ttBPI2)

// Neutral
// Symmetrical Triangle
// if symmetricalTriangle()
//     var ttST = "A symmetrical triangle is a chart pattern characterized by two converging trend lines connecting a series of sequential peaks and troughs. These trend lines should be converging at a roughly equal slope"
//     label.new(bar_index, labelPosition, text="ST", style=labelStyle, color = color.gray, textcolor=color.white, tooltip = ttST)

if symmetricalTriangle()
    line.new(bar_index[2], high[2], bar_index, high, width = 2, color = color.orange)
    line.new(bar_index[2], low[2], bar_index, low, width = 2, color = color.orange)

// Broadening triangle
// if broadeningTriangle() 
//     var ttBT = "Broadening is characterized by increasing price volatility and diagrammed as two diverging trend lines, one rising and one falling."
//     label.new(bar_index, labelPosition, text="BT", style=labelStyle, color = color.gray, textcolor=color.white, tooltip = ttBT)

if broadeningTriangle()
    line.new(bar_index[2], high[2], bar_index, high, width = 2, color = color.orange)
    line.new(bar_index[2], low[2], bar_index, low, width = 2, color = color.orange)

// Doji
if sdj and (doji or dragonflyDoji or gravestoneDoji) and (volume > volume[1] or volume > emaVol25) 
    var ttDoji = "Doji\nWhen the open and close of a security are essentially equal to each other, a doji candle forms. The length of both upper and lower shadows may vary, causing the candlestick you are left with to either resemble a cross, an inverted cross, or a plus sign. Doji candles show the playout of buyer-seller indecision in a tug-of-war of sorts. As price moves either above or below the opening level during the session, the close is either at or near the opening level."
    label.new(bar_index, labelPosition, text="DJ", style=labelStyle, color = color.gray, textcolor=color.white, tooltip = ttDoji)

//Stair step
if upStairStep or dnStairStep
    var ttSS = "Like the flag, the stair-step is going to occur after a sharp trend to the upside or downside"
    label.new(bar_index, labelPosition, text="SS", style=labelStyle, color = color.gray, textcolor=color.white, tooltip = ttSS)

// Break out
// Indecision Zone
if bearIZ() or bullIZ()
    var ttIZ = "The IZ pattern that come about due to indecision candlesticks can provide hints to the direction price are likely to move in the long run."
    label.new(bar_index, labelPosition, text="IZB", style=labelStyle, color = color.orange, textcolor=color.white, tooltip = ttIZ)

// NR7
if nr7
    var ttNR7 = "Smallest bar in last 7 bars"
    label.new(bar_index, labelPosition, text="NR7", style=labelStyle, color = color.orange, textcolor=color.white, tooltip = ttNR7)

// OO
if OO or OO1
    var ttOO = "Breakout Mode"
    label.new(bar_index, labelPosition, text="OO", style=labelStyle, color = color.orange, textcolor=color.white, tooltip = ttOO)

// IOI
if IOI
    var ttIOI = "IOI"
    label.new(bar_index, labelPosition, text="IOI", style=labelStyle, color = color.orange, textcolor=color.white, tooltip = ttIOI)

// x = bar_index
// y = low
// txt = tostring(ema25)
// label.new(x, y, txt, color=color.red)

// a = bar_index
// b = high
// text = tostring(close)
// label.new(a, b, text, color=color.green)