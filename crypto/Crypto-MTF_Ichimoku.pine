// © trungnguyen
//@version=4
study("MTF Ichimoku Cloud", overlay=true)

// ——————————————————————————————————————————————————————————————————————————————————————
// ——————————————————————————————————— CONFIGURATION  ———————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————

C00 = "Original", C01 = "Aqua", C02 = "Black", C03 = "Blue", C04 = "Coral", C05 = "Gold", C06 = "Gray", C07 = "Green", C08 = "Lime", C09 = "Maroon", C10 = "Orange", C11 = "Pink", C12 = "Red", C13 = "Violet", C14 = "Yellow", C15 = "White"

isActiveFirst              = input(false, "──────── First ichimoku ───────", group="Time Frame Configuration")
firstIchi                  = input("15",  "► Time frame", type = input.resolution, group="Time Frame Configuration")
isActiveSecond             = input(false, "────── Second ichimoku ───────", group="Time Frame Configuration")
secondIchi                 = input("60", "► Time frame", type = input.resolution, group="Time Frame Configuration")
isActiveThird              = input(false, "─────── Third ichimoku ────────", group="Time Frame Configuration")
thirdIchi                  = input("240",  "► Time frame", type = input.resolution, group="Time Frame Configuration")
isActiveFourth             = input(false, "─────── Fourth ichimoku ───────", group="Time Frame Configuration")
fourthIchi                 = input("1D",  "► Time frame", type = input.resolution, group="Time Frame Configuration")
isActiveFirstTenkan        = input(true,  "Tenkan TF1", group="Show Ichimoku")
isActiveAosen              = input(true,  "Aosen TF1", group="Show Ichimoku")
isActiveFirstKijun         = input(false,  "Kijun TF1", group="Show Ichimoku")
isActiveFirstChikou        = input(true,  "Chikou TF1", group="Show Ichimoku")
isActiveFirstKumo          = input(true,  "Kumo TF1", group="Show Ichimoku")
isActiveSecondTenkan       = input(false,  "Tenkan TF2", group="Show Ichimoku")
isActiveSecondKijun        = input(false,  "Kijun TF2", group="Show Ichimoku")
isActiveSecondChikou       = input(false,  "Chikou TF2", group="Show Ichimoku")
isActiveSecondKumo         = input(true,   "Kumo TF2", group="Show Ichimoku")
isActiveThirdTenkan        = input(false,  "Tenkan TF3", group="Show Ichimoku")
isActiveThirdKijun         = input(false,  "Kijun TF3", group="Show Ichimoku")
isActiveThirdChikou        = input(false,  "Chikou TF3", group="Show Ichimoku")
isActiveThirdKumo          = input(true,   "Kumo TF3", group="Show Ichimoku")
isActiveFourthTenkan       = input(false,  "Tenkan TF4", group="Show Ichimoku")
isActiveFourthKijun        = input(false,  "Kijun TF4", group="Show Ichimoku")
isActiveFourthChikou       = input(false,  "Chikou TF4", group="Show Ichimoku")
isActiveFourthKumo         = input(true,   "Kumo TF4", group="Show Ichimoku")
isActiveMonoKumo           = input(true,   "Monochrome", group="Color Setting")
conversionPeriods          = input(9, minval=1,  title="Conversion Line Periods", group="Ichimoku Setting")
basePeriods                = input(26, minval=1, title="Base Line Periods", group="Ichimoku Setting")
laggingSpan2Periods        = input(52, minval=1, title="Lagging Span 2 Periods", group="Ichimoku Setting")
displacement               = input(26, minval=1, title="Displacement", group="Ichimoku Setting")
isActiveLabel              = input(false,  "Label  ──────────────", group="Color Setting")
labelOffset                = input(4,      "    ▪ Offset", minval = -20, maxval = 20, group="Color Setting")
labelColor                 = input(C00,    "    ▪ Color", options = [C00, C01, C02, C03, C04, C05, C06, C07, C08, C09, C10, C11, C12, C13, C14, C15], group="Color Setting")
isActiveAbbreviation       = input(false,  "  ▪ Abbreviation", group="Color Setting")

// ——————————————————————————————————————————————————————————————————————————————————————
// ————————————————————————————————————— CONSTANTS  —————————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————

// ————— Ichimoku
tenkanPeriods=conversionPeriods
kijunPeriods=basePeriods
SSBPeriods=laggingSpan2Periods
displacementPeriods=displacement-1

// ————— Styles
colorVeryLightBlue=#B0B7E6
colorLightBlue=#8893D9
colorDarkBlue=#3E4EBD
colorVeryLightGreen=#9AD6B7
colorLightGreen=#59BD89
colorDarkGreen=#327E56
colorVeryLightOrange=#F5D8A0
colorLightOrange=#EEB448
colorDarkOrange=#EB8412
colorVeryLightPink=#E1AEF0
colorLightPink=#CF83E9
colorDarkPink=#B949DE
colorSkin=#EFCEB4
transp=80

colorTest1=#A7AEE2
colorTest2=#313E95

// ————— Time
timeOffset=time-time[1]

// ——————————————————————————————————————————————————————————————————————————————————————
// ————————————————————————————————————— FUNCTION  ——————————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————
// Show Bar
previousHigh = highest(1)[1] 
previousLow = lowest(1)[1]
insideBarUp    = (high <= high[1] and low >= low[1] and close >= open)
insideBarDown  = (high <= high[1] and low >= low[1] and open >= close) 
outsideBarUp   = (high>high[1] and low<low[1]  and close>previousHigh)
outsideBarDown = (high>high[1] and low<low[1] and close<previousLow)

barcolor(insideBarUp ? color.silver : outsideBarUp ? color.blue : close>open ? color.green : na)
barcolor(insideBarDown ? color.silver : outsideBarDown ? color.blue : close<open ? color.red : na)

// ————— Converts color choise
f_stringInColor(_color) =>
    // _color: color label (string format).
      _color  == "Aqua"     ? #0080FFef :
      _color  == "Black"    ? #000000ef :
      _color  == "Blue"     ? #013BCAef :
      _color  == "Coral"    ? #FF8080ef :
      _color  == "Gold"     ? #CCCC00ef :
      _color  == "Gray"     ? #808080ef :
      _color  == "Green"    ? #008000ef :
      _color  == "Lime"     ? #00FF00ef :
      _color  == "Maroon"   ? #800000ef :
      _color  == "Orange"   ? #FF8000ef :
      _color  == "Pink"     ? #FF0080ef :
      _color  == "Red"      ? #FF0000ef :
      _color  == "Violet"   ? #AA00FFef :
      _color  == "Yellow"   ? #FFFF00ef : #FFFFFFff

// ————— Converts current resolution
f_resolutionInString(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
      _res  == "1"   ? "M1"  :
      _res  == "3"   ? "M3"  :
      _res  == "5"   ? "M5"  :
      _res  == "15"  ? "M15" :
      _res  == "30"  ? "M30" :
      _res  == "45"  ? "M45" :
      _res  == "60"  ? "H1"  :
      _res  == "120" ? "H2"  :
      _res  == "180" ? "H3"  :
      _res  == "240" ? "H4"  :
      _res  == "1D"  ? "D"   :
      _res  == "1W"  ? "W"   :
      _res  == "1M"  ? "M"   : _res

// ————— Returns the tenkan text
f_getTenkanText(_res, _isAbbreviation) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    tf = f_resolutionInString(_res)
    _isAbbreviation ? "Tk " + tf  : "Tenkan " + tf

// ————— Returns the tenkan text
f_getKijunText(_res, _isAbbreviation) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    tf = f_resolutionInString(_res)
    _isAbbreviation ? "Kj " + tf  : "Kijun " + tf

// ————— Returns the tenkan text
f_getChikouText(_res, _isAbbreviation) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    tf = f_resolutionInString(_res)
    _isAbbreviation ? "Ck " + tf  : "Chikou " + tf

// ————— Converts current "timeframe.multiplier" plus the TF into minutes of type float.
f_resolutionInMinutes() => 
   timeframe.multiplier * (
	 timeframe.isseconds ? 1. / 60. :
	 timeframe.isminutes ? 1.       :
	 timeframe.isdaily   ? 1440.    :
	 timeframe.isweekly  ? 10080.   :
	 timeframe.ismonthly ? 43800.   : na)


// ————— Returns resolution of _resolution period in minutes.
f_timeFrameResolutionInMinutes(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    security(syminfo.tickerid, _res, f_resolutionInMinutes())

// ————— Returns the average number of current chart bars in the given target HTF resolution (this reflects the dataset's history).
f_avgDilationOf(_res) =>
    // _res: resolution of any TF (in "timeframe.period" string format).
    b = barssince(change(time(_res)))
    cumTotal = cum(b == 0 ? b[1] + 1 : 0)
    cumCount = cum(b == 0 ? 1 : 0)
    round(cumTotal / cumCount)

// ————— Returns the displacement of the resolution
f_getDisplacement(_res) =>
    f_avgDilationOf(_res)*displacementPeriods

// ————— Returns average value between lowest and highest
f_avgLH(_len) => avg(lowest(_len), highest(_len))

// ————— Returns f_donchian data 
f_donchian(_tf, _src) => security(syminfo.tickerid, _tf, _src, barmerge.gaps_off, barmerge.lookahead_on)

// ————— Returns ichimoku data
f_ichimokuData(_isActive, _tf) =>
	_isShow = _isActive and f_timeFrameResolutionInMinutes(_tf) >= f_resolutionInMinutes()
	_displacement = _isShow ?  f_getDisplacement(_tf) : na
	_tenkan = _isShow ? f_donchian(_tf, f_avgLH(tenkanPeriods)) : na
	_kijun = _isShow ? f_donchian(_tf, f_avgLH(kijunPeriods)) : na
	_chikou = _isShow ? f_donchian(_tf, close) : na
	_SSA = _isShow ? avg(_tenkan, _kijun) : na
	_SSB = _isShow ? f_donchian(_tf, f_avgLH(SSBPeriods)) : na
	_middleKumo = _isShow ? _SSA[0] > _SSB[0] ? _SSA[0] - (abs(_SSA[0]-_SSB[0])/2) : _SSA[0] + (abs(_SSA[0]-_SSB[0])/2) : na
    _maxAosen      = _isShow ? max(_tenkan[displacement - 1],_kijun[displacement - 1]) : na
    _minAosen      = _isShow ? min(_tenkan[displacement - 1],_kijun[displacement - 1]) : na
	[_displacement, _tenkan, _kijun, _chikou, _SSA, _SSB, _middleKumo, _maxAosen, _minAosen]

// --- Return chikou
chikou_up = (close > high[26] and close > high[25] and close > high[24] and close > high[23] and close > high[22] and close > high[21] and close > high[20] and close > high[19] and close > high[18] and close > high[17] and close > high[16])
chikou_dn = (close < low[26]  and close < low[25]  and close < low[24]  and close < low[23]  and close < low[22]  and close < low[21]  and close < low[20]  and close < low[19]  and close < low[18]  and close < low[17]  and close < low[16])
chikou_clr = chikou_up ? color.purple : chikou_dn ? color.blue : color.silver

// ——————————————————————————————————————————————————————————————————————————————————————
// ——————————————————————————————————— FIRST ICHIMOKU  ——————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————

[firstDisplacement, firstTenkan, firstKijun, firstChikou, firstSSA, firstSSB, firstMiddleKumo, firstMaxAosen, firstMinAosen] = f_ichimokuData(isActiveFirst, firstIchi)

// ————— Tenkan
//plot(isActiveFirstTenkan ? firstTenkan : na, color=colorLightBlue, title="First Tenkan", linewidth=1)
// ————— Kijun
//plot(isActiveFirstKijun ? firstKijun : na, color=colorDarkBlue, title="First Kijun", linewidth=1)
// ————— Chikou
plot(isActiveFirstChikou ? firstChikou : na, offset = -firstDisplacement, color=chikou_clr, title="First Chikou")

// ————— SSA + SSB
ssaFirst=plot(isActiveFirstKumo ? firstSSA : na, offset = firstDisplacement, color=colorLightBlue, title="First SSA", linewidth=1)
ssbFirst=plot(isActiveFirstKumo ? firstSSB : na, offset = firstDisplacement, color=colorLightBlue, title="First SSB", linewidth=1)
fill(ssaFirst, ssbFirst, color.new(isActiveMonoKumo ? colorDarkBlue : (firstSSA > firstSSB ? colorVeryLightBlue : colorDarkBlue), transp=transp), title="First Kumo")

// ————— Aosen
// ————— 9
a1 =  plot(isActiveAosen ? firstTenkan : na, color=colorLightBlue, title="First Tenkan", linewidth=1)
// ————— 26
a2 =  plot(isActiveAosen ? firstKijun : na, color=color.red, title="First Kijun", linewidth=1)
// ao sen
fill(a1, a2, color = firstTenkan > firstKijun ? color.new(colorSkin, transp=transp) : color.new(colorSkin, transp=transp))

// ——————————————————————————————————————————————————————————————————————————————————————
// ——————————————————————————————————— SECOND ICHIMOKU  —————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————

[secondDisplacement, secondTenkan, secondKijun, secondChikou, secondSSA, secondSSB, secondMiddleKumo, secondMaxAosen, secondMinAosen] = f_ichimokuData(isActiveSecond, secondIchi)

// ————— Tenkan
plot(isActiveSecondTenkan ? secondTenkan : na, color=colorLightGreen, title="Second Tenkan", linewidth=1)
// ————— Kijun
plot(isActiveSecondKijun ? secondKijun : na, color=colorDarkGreen, title="Second Kijun", linewidth=1)
// ————— Chikou
plot(isActiveSecondChikou ? secondChikou : na, offset = -secondDisplacement, color=chikou_clr, title="Second Chikou")

// ————— SSA + SSB
ssaSecond=plot(isActiveSecondKumo ? secondSSA : na, offset = secondDisplacement, color=colorLightGreen, title="Second SSA", linewidth=1)
ssbSecond=plot(isActiveSecondKumo ? secondSSB : na, offset = secondDisplacement, color=colorLightGreen, title="Second SSB", linewidth=1)
fill(ssaSecond, ssbSecond, color.new(isActiveMonoKumo ? colorDarkGreen : (secondSSA > secondSSB ? colorVeryLightGreen : colorDarkGreen), transp=transp), title="Second Kumo")

// ——————————————————————————————————————————————————————————————————————————————————————
// ——————————————————————————————————— THIRD ICHIMOKU  ——————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————

[thirdDisplacement, thirdTenkan, thirdKijun, thirdChikou, thirdSSA, thirdSSB, thirdMiddleKumo, thirdMaxAosen, thirdMinAosen] = f_ichimokuData(isActiveThird, thirdIchi)

// ————— Tenkan
plot(isActiveThirdTenkan ? thirdTenkan : na, color=colorLightPink, title="Third Tenkan", linewidth=1)
// ————— Kijun
plot(isActiveThirdKijun ? thirdKijun : na, color=colorDarkPink, title="Third Kijun", linewidth=1)
// ————— Chikou
plot(isActiveThirdChikou ? thirdChikou : na, offset = -thirdDisplacement, color=chikou_clr, title="Third Chikou")

// ————— SSA + SSB
ssaThird=plot(isActiveThirdKumo ? thirdSSA : na, offset = thirdDisplacement, color=colorLightPink, title="Third SSA", linewidth=1)
ssbThird=plot(isActiveThirdKumo ? thirdSSB : na, offset = thirdDisplacement, color=colorLightPink, title="Third SSB", linewidth=1)
fill(ssaThird, ssbThird, color.new(isActiveMonoKumo ? colorDarkPink : (thirdSSA > thirdSSB ? colorVeryLightPink : colorDarkPink), transp=transp), title="Third Kumo")


// ——————————————————————————————————————————————————————————————————————————————————————
// ————————————————————————————————— FOURTH ICHIMOKU  ———————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————

[fourthDisplacement, fourthTenkan, fourthKijun, fourthChikou, fourthSSA, fourthSSB, fourthMiddleKumo, fourthMaxAosen, fourthMinAosen] = f_ichimokuData(isActiveFourth, fourthIchi)

// ————— Tenkan
plot(isActiveFourthTenkan ? fourthTenkan : na, color=colorLightOrange, title="Fourth Tenkan", linewidth=1)
// ————— Kijun
plot(isActiveFourthKijun ? fourthKijun : na, color=colorDarkOrange, title="Fourth Kijun", linewidth=1)
// ————— Chikou
plot(isActiveFourthChikou ? fourthChikou : na, offset = -fourthDisplacement, color=chikou_clr, title="Fourth Chikou")

// ————— SSA + SSB
ssaFourth=plot(isActiveFourthKumo ? fourthSSA : na, offset = fourthDisplacement, color=colorLightOrange, title="Fourth SSA", linewidth=1)
ssbFourth=plot(isActiveFourthKumo ? fourthSSB : na, offset = fourthDisplacement, color=colorLightOrange, title="Fourth SSB", linewidth=1)
fill(ssaFourth, ssbFourth, color.new(isActiveMonoKumo ? colorDarkOrange : (fourthSSA > fourthSSB ? colorVeryLightOrange : colorDarkOrange), transp=transp), title="Fourth Kumo")

// ——————————————————————————————————————————————————————————————————————————————————————
// ——————————————————————————————————————— LABEL ————————————————————————————————————————
// ——————————————————————————————————————————————————————————————————————————————————————

var label firstTenkanLabel = na
var label firstKijunLabel = na
var label firstChikouLabel = na
var label firstKumoLabel = na

var label secondTenkanLabel = na
var label secondKijunLabel = na
var label secondChikouLabel = na
var label secondKumoLabel = na

var label thirdTenkanLabel = na
var label thirdKijunLabel = na
var label thirdChikouLabel = na
var label thirdKumoLabel = na

var label fourthTenkanLabel = na
var label fourthKijunLabel = na
var label fourthChikouLabel = na
var label fourthKumoLabel = na

label.delete(firstTenkanLabel)
label.delete(firstKijunLabel)
label.delete(firstChikouLabel)
label.delete(firstKumoLabel)

label.delete(secondTenkanLabel)
label.delete(secondKijunLabel)
label.delete(secondChikouLabel)
label.delete(secondKumoLabel)

label.delete(thirdTenkanLabel)
label.delete(thirdKijunLabel)
label.delete(thirdChikouLabel)
label.delete(thirdKumoLabel)

label.delete(fourthTenkanLabel)
label.delete(fourthKijunLabel)
label.delete(fourthChikouLabel)
label.delete(fourthKumoLabel)

if isActiveFirst and isActiveLabel and f_timeFrameResolutionInMinutes(firstIchi) >= f_resolutionInMinutes()
    offsetLabel=time+(timeOffset*labelOffset)
    offsetFirst=labelOffset < 0 ? labelOffset : 0
    offsetDisplacementFirst=timeOffset*(firstDisplacement-labelOffset)
    if isActiveFirstTenkan
        firstTenkanLabel:=label.new(x=offsetLabel, y=firstTenkan[offsetFirst], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(firstTenkanLabel, f_getTenkanText(firstIchi, isActiveAbbreviation))
        label.set_textcolor(firstTenkanLabel, labelColor == 'Original' ? colorDarkBlue : f_stringInColor(labelColor))
    if isActiveFirstKijun
        firstKijunLabel:=label.new(x=offsetLabel, y=firstKijun[offsetFirst], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(firstKijunLabel, f_getKijunText(firstIchi, isActiveAbbreviation))
        label.set_textcolor(firstKijunLabel, labelColor == 'Original' ? colorDarkBlue : f_stringInColor(labelColor))
    if isActiveFirstChikou
        firstChikouLabel:=label.new(x=time-offsetDisplacementFirst,y=firstChikou[1], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(firstChikouLabel, f_getChikouText(firstIchi, isActiveAbbreviation))
        label.set_textcolor(firstChikouLabel, labelColor == 'Original' ? colorDarkBlue : f_stringInColor(labelColor))
    if isActiveFirstKumo
        firstKumoLabel:=label.new(x=time+offsetDisplacementFirst,y=firstMiddleKumo, xloc=xloc.bar_time, style=label.style_none)
        label.set_text(firstKumoLabel, "Kumo "+f_resolutionInString(firstIchi))
        label.set_textcolor(firstKumoLabel, labelColor == 'Original' ? colorDarkBlue : f_stringInColor(labelColor))

if isActiveSecond and isActiveLabel and f_timeFrameResolutionInMinutes(secondIchi) >= f_resolutionInMinutes()
    offsetLabel=time+(timeOffset*labelOffset)
    offsetSecond=labelOffset < 0 ? labelOffset : 0
    offsetDisplacementSecond=timeOffset*(secondDisplacement-labelOffset)
    if isActiveSecondTenkan
        secondTenkanLabel:=label.new(x=offsetLabel, y=secondTenkan[offsetSecond], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(secondTenkanLabel, f_getTenkanText(secondIchi, isActiveAbbreviation))
        label.set_textcolor(secondTenkanLabel, labelColor == 'Original' ? colorDarkGreen : f_stringInColor(labelColor))
    if isActiveSecondKijun
        secondKijunLabel:=label.new(x=offsetLabel, y=secondKijun[offsetSecond], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(secondKijunLabel, f_getKijunText(secondIchi, isActiveAbbreviation))
        label.set_textcolor(secondKijunLabel, labelColor == 'Original' ? colorDarkGreen : f_stringInColor(labelColor))
    if isActiveSecondChikou
        secondChikouLabel:=label.new(x=time-offsetDisplacementSecond,y=secondChikou[1], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(secondChikouLabel, f_getChikouText(secondIchi, isActiveAbbreviation))
        label.set_textcolor(secondChikouLabel, labelColor == 'Original' ? colorDarkGreen : f_stringInColor(labelColor))
    if isActiveSecondKumo
        secondKumoLabel:=label.new(x=time+offsetDisplacementSecond,y=secondMiddleKumo, xloc=xloc.bar_time, style=label.style_none)
        label.set_text(secondKumoLabel, "Kumo "+f_resolutionInString(secondIchi))
        label.set_textcolor(secondKumoLabel, labelColor == 'Original' ? colorDarkGreen : f_stringInColor(labelColor))

if isActiveThird and isActiveLabel and f_timeFrameResolutionInMinutes(thirdIchi) >= f_resolutionInMinutes()
    offsetLabel=time+(timeOffset*labelOffset)
    offsetThird=labelOffset < 0 ? labelOffset : 0
    offsetDisplacementThird=timeOffset*(thirdDisplacement-labelOffset)
    if isActiveThirdTenkan
        thirdTenkanLabel:=label.new(x=offsetLabel, y=thirdTenkan[offsetThird], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(thirdTenkanLabel, f_getTenkanText(thirdIchi, isActiveAbbreviation))
        label.set_textcolor(thirdTenkanLabel, labelColor == 'Original' ? colorDarkPink : f_stringInColor(labelColor))
    if isActiveThirdKijun
        thirdKijunLabel:=label.new(x=offsetLabel, y=thirdKijun[offsetThird], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(thirdKijunLabel, f_getKijunText(thirdIchi, isActiveAbbreviation))
        label.set_textcolor(thirdKijunLabel, labelColor == 'Original' ? colorDarkPink : f_stringInColor(labelColor))
    if isActiveThirdChikou
        thirdChikouLabel:=label.new(x=time-offsetDisplacementThird,y=thirdChikou[1], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(thirdChikouLabel, f_getChikouText(thirdIchi, isActiveAbbreviation))
        label.set_textcolor(thirdChikouLabel, labelColor == 'Original' ? colorDarkPink : f_stringInColor(labelColor))
    if isActiveThirdKumo
        thirdKumoLabel:=label.new(x=time+offsetDisplacementThird,y=thirdMiddleKumo, xloc=xloc.bar_time, style=label.style_none)
        label.set_text(thirdKumoLabel, "Kumo "+f_resolutionInString(thirdIchi))
        label.set_textcolor(thirdKumoLabel, labelColor == 'Original' ? colorDarkPink : f_stringInColor(labelColor))

if isActiveFourth and isActiveLabel and f_timeFrameResolutionInMinutes(fourthIchi) >= f_resolutionInMinutes()
    offsetLabel=time+(timeOffset*labelOffset)
    offsetFourth=labelOffset < 0 ? labelOffset : 0
    offsetDisplacementFourth=timeOffset*(fourthDisplacement-labelOffset)
    if isActiveFourthTenkan
        fourthTenkanLabel:=label.new(x=offsetLabel, y=fourthTenkan[offsetFourth], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(fourthTenkanLabel, f_getTenkanText(fourthIchi, isActiveAbbreviation))
        label.set_textcolor(fourthTenkanLabel, labelColor == 'Original' ? colorDarkOrange : f_stringInColor(labelColor))
    if isActiveFourthKijun
        fourthKijunLabel:=label.new(x=offsetLabel, y=fourthKijun[offsetFourth], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(fourthKijunLabel, f_getKijunText(fourthIchi, isActiveAbbreviation))
        label.set_textcolor(fourthKijunLabel, labelColor == 'Original' ? colorDarkOrange : f_stringInColor(labelColor))
    if isActiveFourthChikou
        fourthChikouLabel:=label.new(x=time-offsetDisplacementFourth,y=fourthChikou[1], xloc=xloc.bar_time, style=label.style_none)
        label.set_text(fourthChikouLabel, f_getChikouText(fourthIchi, isActiveAbbreviation))
        label.set_textcolor(fourthChikouLabel, labelColor == 'Original' ? colorDarkOrange : f_stringInColor(labelColor))
    if isActiveFourthKumo
	    fourthKumoLabel:=label.new(x=time+offsetDisplacementFourth,y=fourthMiddleKumo, xloc=xloc.bar_time, style=label.style_none)
        label.set_text(fourthKumoLabel, "Kumo "+f_resolutionInString(fourthIchi))
        label.set_textcolor(fourthKumoLabel, labelColor == 'Original' ? colorDarkOrange : f_stringInColor(labelColor))

