//@version=4
study("Index - Price Action Bars", overlay=true)

spb                   = input(true, title="Show Pinbar?")
skgr                  = input(true, title="Show Kangaroo Tail?")
sms                   = input(true, title="Show Morning/Evening Star?")
srft                  = input(true, title="Show Rising/Failing Three Bars?")
s3ws                  = input(true, title="Show Three White Soldiers/Black Crows bars?")
ssp                   = input(true, title="Show Deliberation/Stalled pattern?")
sstr                  = input(true, title="Show Symmetrical Triangle?")
scz                   = input(true, title="Show Congestion zone?")
shl                   = input(true, title="Show HL/LH Break?")
eav                   = input(8, minval=1, maxval=100, title="EMA Depth For Body Average/Volatility")
wav                   = input(13, minval=1, maxval=100, title="EMA Depth For Wick Average/Volatility")
hlLengthCheck         = input(8, minval=1, maxval=99, title="Highest/Lowest Length Check")
pctShadow             = input(50, minval=1, maxval=99, title="Percentage Input Of Up/Down Shadow, What % The Wick Of Candle Has To Be Compared To Body")

// spread|range
spread    = abs(close - open)
bodyHigh  = max(close, open)
bodyLow   = min(close, open)
// spread    = bodyHigh - bodyLow
range     = high - low
upShadow  = high - bodyHigh
dnShadow  = bodyLow - low
whiteBody = open < close
blackBody = open > close

// EMA
spreadAvg             = ema(spread, eav)
rangeAvg              = ema(range, eav)
averageTopWickSize    = sma(upShadow, wav)
averageBottomWickSize = sma(dnShadow, wav)

bigBody         = spread > spreadAvg*2
mediumLongBody  = spread > spreadAvg and spread < spreadAvg*2
longBody        = spread > spreadAvg
smallBody       = spread < spreadAvg
mediumSmallBody = spread < spreadAvg and spread > spreadAvg/2
tinyBody        = spread < spreadAvg/2
bodyMiddle      = spread / 2 + bodyLow

// smallest spread check
f_isSmallest(start_index, end_index) =>
    bool isSmallestSpread = true
    for i = start_index to end_index
        if spread > spread[i] 
            isSmallestSpread := false
            break

	_isSmallestSpread = isSmallestSpread
    [_isSmallestSpread]

f_isLowest(lowest_index, start_index, end_index) =>
    bool isLowestLow = true
    for i = start_index to end_index
        if low[lowest_index] > low[i] 
            isLowestLow := false
            break

	_isLowestLow = isLowestLow
    [_isLowestLow]

f_isHighest(highest_index, start_index, end_index) =>
    bool isHighestHigh = true
    for i = start_index to end_index
        if high[highest_index] < high[i]
            isHighestHigh := false
            break

	_isHighestHigh = isHighestHigh
    [_isHighestHigh]

highestBarCheck() => highestbars(high, hlLengthCheck) == 0 ? 1 : 0
lowestBarCheck()  => lowestbars(low, hlLengthCheck) == 0 ? 1 : 0
highestBarCheckWithParam(length) => highestbars(high, length) == 0 ? 1 : 0
lowestBarCheckWithParam(length)  => lowestbars(low, length) == 0 ? 1 : 0

bigSpreadTaken     = spread > range*0.7
averageSpreadTaken = spread > range*0.5
smallSpreadTaken   = spread < range*0.3

// Marubozu
// tong chieu dau rau nen tren va rau nen duoi bang x% cua range nen
rangeTakenByBothShadows() => (upShadow + dnShadow) <= (high - low)*0.7 ? 1 : 0
// chieu dai rau nen tren so voi muc cho phep cua rau nen
spreadTakenByUpShadow()   => upShadow <= pctShadow/100*spread ? 1 : 0
// chieu dai rau nen duoi so voi muc cho phep cua rau nen
spreadTakenByDnShadow()   => dnShadow <= pctShadow/100*spread ? 1 : 0

marubozuUpBar = close > open and rangeTakenByBothShadows() and spreadTakenByUpShadow()
marubozuDnBar = close < open and rangeTakenByBothShadows() and spreadTakenByDnShadow()

///PinBars
bullishPinbar = spread*2 < spreadAvg and smallSpreadTaken and lowestBarCheck() and dnShadow > averageBottomWickSize*2.5 and upShadow*3 < dnShadow
bearishPinbar = spread*2 < spreadAvg and smallSpreadTaken and highestBarCheck() and upShadow > averageTopWickSize*2.5 and upShadow > dnShadow*3

//Piercing bar (>=0.5)
bullishPiercing = blackBody[1] and longBody[1] and whiteBody and open <= low[1] and close >= bodyMiddle[1] and close < open[1]
bearishPiercing = whiteBody[1] and longBody[1] and blackBody and open >= high[1] and close <= bodyMiddle[1] and close > open[1]

// Engulfing bar
bearishEngulfing = blackBody and longBody and whiteBody[1] and mediumLongBody[1] and close <= open[1] and open >= close[1] and ( close < open[1] or open >= close[1] )
bullishEngulfing = whiteBody and longBody and blackBody[1] and mediumLongBody[1] and close >= open[1] and open <= close[1] and ( close > open[1] or open <= close[1] )

//Doji 
dojiBodyPercent = 5.0
shadowEqualsPercent = 100.0
shadowEquals = upShadow == dnShadow or (abs(upShadow - dnShadow) / dnShadow * 100) < shadowEqualsPercent and (abs(dnShadow - upShadow) / upShadow * 100) < shadowEqualsPercent
isDojiBody = range > 0 and spread <= range * dojiBodyPercent / 100
doji = isDojiBody and shadowEquals
dragonflyDoji = isDojiBody and upShadow <= spread
gravestoneDoji = isDojiBody and dnShadow <= spread

// Spinning Top 
spinningTopPercent = 34.0
spinningTopWhite = dnShadow >= range / 100 * spinningTopPercent and upShadow >= range / 100 * spinningTopPercent and not isDojiBody and whiteBody
spinningTopBlack = dnShadow >= range / 100 * spinningTopPercent and upShadow >= range / 100 * spinningTopPercent and not isDojiBody and blackBody

// Shooting Star / Hammer
factor = 2.0 // shows the number of times the shadow dominates the candlestick body
shadowPercent = 5.0 // size of shadows
hasUpShadow = upShadow > shadowPercent / 100 * range
hasDnShadow = dnShadow > shadowPercent / 100 * range
shootingStar = spread < spreadAvg and spread > 0 and bodyHigh < hl2 and upShadow >= factor * spread and not hasDnShadow
hammer       = spread < spreadAvg and spread > 0 and bodyLow > hl2 and dnShadow >= factor * spread and not hasUpShadow

//=========================================================================|
//               ASCENDING/DECREASING CHANNEL BREAK OUT                    | 
//=========================================================================|
bool decreasingChannel_thirdBar      = false
bool decreasingChannel_secondBar     = false
bool decreasingChannel_firstBar      = false
bool decreasingChannel_breakoutBar   = false

if low[3] < low[4] and high[3] < high[4]
    decreasingChannel_thirdBar := true

if low[2] < low[3] and high[2] < high[3]
    decreasingChannel_secondBar := true

if low[1] < low[2] and high[1] < high[2]
    decreasingChannel_firstBar := true

if close > open and close > high[1] and (low < low[1] or bullishPinbar[1])
    decreasingChannel_breakoutBar := true

decreasingChannelBreakout() => shl and decreasingChannel_thirdBar and decreasingChannel_secondBar and decreasingChannel_firstBar and decreasingChannel_breakoutBar

bool ascendingChannel_thirdBar      = false
bool ascendingChannel_secondBar     = false
bool ascendingChannel_firstBar      = false
bool ascendingChannel_breakoutBar   = false


if low[3] > low[4] and high[3] > high[4]
    ascendingChannel_thirdBar := true

if low[2] > low[3] and high[2] > high[3]
    ascendingChannel_secondBar := true

if low[1] > low[2] and high[1] > high[2]
    ascendingChannel_firstBar := true

if close < open and close < low[1] and high > high[1]
    ascendingChannel_breakoutBar := true

ascendingChannelBreakout() => shl and ascendingChannel_thirdBar and ascendingChannel_secondBar and ascendingChannel_firstBar and ascendingChannel_breakoutBar

//=========================================================================|
//                    BULLISH/BREARISH STALLED PATTERN                     | 
//=========================================================================|
// Normally it should be a signal of Bearish reversal of the current Trend. 
// The First One and the Second One have their Real Body longer than the Real Body of the Third Candle.
// The Open and Close of each Candle, should be higher then The Open and Close of the Previous Candle
// The Third Candle has a short Real Body, it can be also a Doji Candle; moreover, it has an Upper Shadow very tall. Lastly, it has the Open near the level of the Close of the Second Candle. 
// The confirmation of the Bearish Reversal could be from the next Candles, when one of them (While is falling) overcomes the midpoint of the Real Body of the Second Candle.
// Be careful! Sometime it is the shakeout in the begining of the trend

bool bullishStalled_thirdBar      = false
bool bullishStalled_secondBar     = false
bool bullishStalled_firstBar      = false

if close[2] > open[2] and spread[2] > spreadAvg and range[2] > rangeAvg
    bullishStalled_thirdBar := true

if close[1] > open[1] and close[1] > high[2] and spread[1] < spread[2] and range[1] < range[2]
    bullishStalled_secondBar := true

if  close > open and close > high[1] and spread < spread[1] and range < range[1]
    bullishStalled_firstBar := true

bullishStalled() => ssp and bullishStalled_firstBar and bullishStalled_secondBar and bullishStalled_thirdBar

bool bearishStalled_thirdBar      = false
bool bearishStalled_secondBar     = false
bool bearishStalled_firstBar      = false

if close[2] < open[2] and spread[2] > spreadAvg and range[2] > rangeAvg
    bearishStalled_thirdBar := true

if close[1] < open[1] and close[1] < low[2] and spread[1] < spread[2] and range[1] < range[2]
    bearishStalled_secondBar := true

if close < open and close < low[1] and spread < spread[1] and range < range[1]
    bearishStalled_firstBar := true

bearishStalled() => ssp and bearishStalled_thirdBar and bearishStalled_secondBar and bearishStalled_firstBar 

//=========================================================================|
//                     SYMMETRICAL TRIANGLE                                | 
//=========================================================================|
bool symTriangle_firstBar       = false
bool symTriangle_secondBar      = false
bool symTriangle_thirdBar       = false
bool symTriangle_fourthBar      = false

if range[4] > rangeAvg
    symTriangle_firstBar := true

if high[3] < high[4] and low[3] > low[4]
    symTriangle_secondBar := true

if high[2] < high[3] and low[2] > low[3]
    symTriangle_thirdBar := true

if high[1] < high[2] and low[1] > low[2]
    symTriangle_fourthBar := true

symmetricalTriangle() => sstr and symTriangle_firstBar and symTriangle_secondBar and symTriangle_thirdBar and symTriangle_fourthBar

//=========================================================================|
//                     SYMMETRICAL TRIANGLE BREAKOUT                       | 
//=========================================================================|
bool symBreakout_firstBar      = false
bool symBreakout_secondBar     = false
bool symBreakout_thirdBar      = false
bool symBreakout_fourthBar     = false
bool symBreakout_breakoutBar   = false

if spread[4] > spreadAvg and range[4] > rangeAvg
    symBreakout_firstBar := true

if high[3] < high[4] and low[3] > low[4] and spread[3] < spreadAvg
    symBreakout_secondBar := true

if high[2] < high[4] and low[2] > low[4] and spread[2] < spreadAvg
    symBreakout_thirdBar := true

if high[1] < high[2] and low[1] > low[2] and spread[1] < spreadAvg
    symBreakout_fourthBar := true

f_triangleBreakout() =>
	_isUp               = close > open 
	_breakDirection     = _isUp ? close > close[4] and close > open[4] : close < close[4] and close < open[4]
    [_breakDirection]

[breakDirection]  = f_triangleBreakout()

if averageSpreadTaken and breakDirection
    symBreakout_breakoutBar := true 

symmetricalTriangleBreakout() => sstr and symBreakout_firstBar and symBreakout_secondBar and symBreakout_thirdBar and symBreakout_fourthBar and symBreakout_breakoutBar

//=========================================================================|
//                     RASING/FAILLING THREE                               | 
//=========================================================================|
// It occurs during an Uptrend;
// The First and Fifth Candle are white and are longer than the other Three Candles of the Pattern
// The Second, Third and Fourth Candle are fully contained within the Real Body of the First Candle
// The Close of the Fifth Candle is above the Close of the First Candle
// Rising three 
bool rising3_firstBar  = false
bool rising3_secondBar = false
bool rising3_thirdBar  = false
bool rising3_fourthBar = false
bool rising3_fifthBar  = false

if close[4] > open[4] and averageSpreadTaken[4] 
    rising3_firstBar := true

if close[3] <= close[4] and close[3] >= open[4] and open[3] <= close[4] 
    rising3_secondBar := true

if close[2]>=open[4] and open[2] <= close[4] and close[2]<=close[4]
    rising3_thirdBar := true

if close[1]>=open[4] and open[1] <= close[4] and close[1]<=close[4]
    rising3_fourthBar := true

if close > close[4] 
    rising3_fifthBar := true

risingThree() => srft and rising3_firstBar and rising3_secondBar and rising3_thirdBar and rising3_fourthBar and rising3_fifthBar 

// Rising three fail
bool rising3f_firstBar  = false
bool rising3f_secondBar = false
bool rising3f_thirdBar  = false
bool rising3f_fourthBar = false
bool rising3f_fifthBar  = false

if close[4] > open[4] and averageSpreadTaken[4] 
    rising3f_firstBar := true

if close[3] <= close[4] and close[3] >= open[4] and open[3] <= close[4] 
    rising3f_secondBar := true

if close[2]>=open[4] and open[2] <= close[4] and close[2]<=close[4]
    rising3f_thirdBar := true

if close[1]>=open[4] and open[1] <= close[4] and close[1]<=close[4]
    rising3f_fourthBar := true

if close > close[4] 
    rising3f_fifthBar := true

risingThreeFail() => srft and rising3f_firstBar and rising3f_secondBar and rising3f_thirdBar and rising3f_fourthBar and rising3f_fifthBar 


// Falling three 
bool falling3_firstBar    = false
bool falling3_secondBar   = false
bool falling3_thirdBar    = false
bool falling3_fourthBar   = false
bool falling3_fifthBar    = false

if close[4] < open[4] and averageSpreadTaken[4]
    falling3_firstBar :=  true

if  close[3] >= close[4] and close[3] <= open[4] and open[3] >= close[4]
    falling3_secondBar := true

if close[2] >= close[4] and close[2] <= open[4] and open[2] >= close[4] 
    falling3_thirdBar := true

if close[1] >= close[4] and close[1] <= open[4] and open[1] >= close[4] 
    falling3_fourthBar := true

if close < close[4]
    falling3_fifthBar :=  true

fallingThree() => srft and falling3_firstBar and falling3_secondBar and falling3_thirdBar and falling3_fourthBar and falling3_fifthBar

// Falling three fail
bool falling3f_firstBar    = false
bool falling3f_secondBar   = false
bool falling3f_thirdBar    = false
bool falling3f_fourthBar   = false
bool falling3f_fifthBar    = false

if close[4] < open[4] and averageSpreadTaken[4]
    falling3f_firstBar :=  true

if  close[3] >= close[4] and close[3] <= open[4] and open[3] >= close[4]
    falling3f_secondBar := true

if close[2] >= close[4] and close[2] <= open[4] and open[2] >= close[4] 
    falling3f_thirdBar := true

if close[1] >= close[4] and close[1] <= open[4] and open[1] >= close[4] 
    falling3f_fourthBar := true

if close > open[4]
    falling3f_fifthBar :=  true

fallingThreeFail() => srft and falling3f_firstBar and falling3f_secondBar and falling3f_thirdBar and falling3f_fourthBar and falling3f_fifthBar

//=========================================================================|
//                     THREE WHITE SOLDIERS                                | 
//=========================================================================|
bool threeSoldiers_firstBar    = false
bool threeSoldiers_secondBar   = false
bool threeSoldiers_thirdBar    = false

if close[2] > open[2] and averageSpreadTaken[2]
    threeSoldiers_firstBar := true

if close[1] > open[1] and close[1] > high[2] and spread[1] > spread[2]
    threeSoldiers_secondBar := true

if close > open and close > high[1] and spread > spread[1]
    threeSoldiers_thirdBar := true

threeWhiterSoldier() => s3ws and threeSoldiers_firstBar and threeSoldiers_secondBar and threeSoldiers_thirdBar
//=========================================================================|
//                     THREE BLACK CROWS                                   | 
//=========================================================================|
bool threeCrows_firstBar    = false
bool threeCrows_secondBar   = false
bool threeCrows_thirdBar    = false

if close[2] < open[2] and averageSpreadTaken[2]
    threeCrows_firstBar := true

if close[1] < open[1] and close[1] < low[2] and spread[1] > spread[2]
    threeCrows_secondBar := true

if close < open and  close < low[1] and spread > spread[1]
    threeCrows_thirdBar := true

threeBlackCrows() => s3ws and threeCrows_firstBar and threeCrows_secondBar and threeCrows_thirdBar

//=========================================================================|
//                     CONGESTION ZONE BREAK                               | 
//=========================================================================|
congestionZone1_4()   => range[4] > rangeAvg or averageSpreadTaken[4] ? 1 : 0
congestionZone1_3()   => close[3] <= high[4] and close[3] >= low[4] ? 1 : 0
congestionZone1_2()   => close[2] <= high[3] and close[2] >= low[3] ? 1 : 0
congestionZone1_1()   => close[1] <= high[2] and close[1] >= low[2] ? 1 : 0
congestionZone1_0()   => close < low[1] or close > high[1]          ? 1 : 0

congestionZone1  = scz and congestionZone1_4() and congestionZone1_3() and congestionZone1_2() and congestionZone1_1() and congestionZone1_0() 

//=========================================================================|
//                     KANGAROO TAIL                                       | 
//=========================================================================|
// range > average range
// no space on the left
// not place right after marubozu bar
// close inside the range of previous bar
// shadow >= body*3
// close at 1/3 of the top or bottom
bool topKgr_wickVolatility          = false
bool topKgr_minimumWickLength       = false
bool topKgr_noSpaceOnTheLeft        = false
bool topKgr_closeNearBottom         = false
bool topKgr_closeInsidePreviousBar  = false
bool topKgr_biggerRangePreviousBar  = false

if range - range[1] >= 0
    topKgr_biggerRangePreviousBar := true

if upShadow >= spread * 3 
    topKgr_minimumWickLength := true

if close <= low + (high - low)/3 and open <= low + (high - low)/3
    topKgr_closeNearBottom := true

if spread > 0 and open <= high[1] and open >= low[1] and close < high[1] and close > low[1]
    topKgr_closeInsidePreviousBar := true

if upShadow >= 2 * averageTopWickSize 
    topKgr_wickVolatility := true

if highestBarCheck()
    topKgr_noSpaceOnTheLeft := true

topKangaroo() => skgr and topKgr_minimumWickLength and topKgr_closeNearBottom and topKgr_closeInsidePreviousBar and topKgr_biggerRangePreviousBar and topKgr_wickVolatility and topKgr_noSpaceOnTheLeft

bool bottomKgr_wickVolatility          = false
bool bottomKgr_minimumWickLength       = false
bool bottomKgr_noSpaceOnTheLeft        = false
bool bottomKgr_closeNearTop            = false
bool bottomKgr_closeInsidePreviousBar  = false
bool bottomKgr_biggerRangePreviousBar  = false

if range - range[1] >= 0
    bottomKgr_biggerRangePreviousBar := true

if dnShadow >= spread * 3
    bottomKgr_minimumWickLength := true

if close >= high - (high - low) / 3 and open >= high - (high - low) / 3 
    bottomKgr_closeNearTop := true

if spread > 0 and open <= high[1] and open >= low[1] and close < high[1] and close > low[1]
    bottomKgr_closeInsidePreviousBar := true

if dnShadow >= 2 * averageBottomWickSize 
    bottomKgr_wickVolatility := true

if lowestBarCheck()
    bottomKgr_noSpaceOnTheLeft := true

bottomKangaroo() => skgr and bottomKgr_biggerRangePreviousBar and bottomKgr_minimumWickLength and bottomKgr_closeNearTop and bottomKgr_closeInsidePreviousBar and bottomKgr_wickVolatility and bottomKgr_noSpaceOnTheLeft

//=========================================================================|
//                     MORNING/EVENING STAR                                | 
//=========================================================================|
//morning
bool morning_firstBar               = false
bool morning_secondBar              = false
bool morning_thirdBar               = false

if close[2] < open[2] and averageSpreadTaken[2] and marubozuDnBar[2] and spread > spreadAvg
    morning_firstBar := true

[morning_isLowestLow]  = f_isLowest(1, 2, hlLengthCheck)
if doji[1] or (hammer[1] and morning_isLowestLow) or (spread[1] < spreadAvg/5 and range[1] < rangeAvg and morning_isLowestLow)
    morning_secondBar := true

if close > open and close > (open[2] + close[2])/2 and close > high[1] 
    morning_thirdBar := true

morningStar() => sms and morning_firstBar and morning_secondBar and morning_thirdBar

bool morning2_firstBar               = false
bool morning2_secondBar              = false
bool morning2_thirdBar               = false

[morning2_isLowestLow]  = f_isLowest(2, 3, hlLengthCheck)
if close[2] < open[2] and averageSpreadTaken[2] and spread[2] > spreadAvg and morning2_isLowestLow
    morning2_firstBar := true

if doji[1] or hammer[1] or spinningTopWhite[1] or spinningTopBlack[1] or dragonflyDoji[1]
    morning2_secondBar := true

if close > open and close > open[2] and marubozuUpBar
    morning2_thirdBar := true

morningStar2() => sms and morning2_firstBar and morning2_secondBar and morning2_thirdBar

//evening
bool evening_firstBar               = false
bool evening_secondBar              = false
bool evening_thirdBar               = false

if close[2] > open[2] and averageSpreadTaken[2] and marubozuUpBar[2] and spread > spreadAvg
    evening_firstBar := true

[evening_isHighestHigh]  = f_isHighest(1, 2, hlLengthCheck)
if doji[1] or (shootingStar[1] and evening_isHighestHigh) or (spread[1] < spreadAvg/5 and range[1] < rangeAvg and evening_isHighestHigh)
    evening_secondBar := true

if close < open and close < (open[2] + close[2])/2 and close < low[1]
    evening_thirdBar := true

eveningStar() => sms and evening_firstBar and evening_secondBar and evening_thirdBar

bool evening2_firstBar               = false
bool evening2_secondBar              = false
bool evening2_thirdBar               = false

[evening2_isHighestHigh]  = f_isHighest(2, 3, hlLengthCheck)
if close[2] < open[2] and averageSpreadTaken[2]  and spread[2] > spreadAvg and evening2_isHighestHigh
    evening2_firstBar := true

if doji[1] or shootingStar[1] or spinningTopWhite[1] or spinningTopBlack[1] or gravestoneDoji[1]
    evening2_secondBar := true

if close > open and close < close[2] and marubozuDnBar
    evening2_thirdBar := true

eveningStar2() => sms and evening2_firstBar and evening2_secondBar and evening2_thirdBar

//------------------------------------------------------------------------------
// Congestion zone
barcolor(congestionZone1 ? color.yellow : na )

// Congestion break out failure
bool breakout_failure = false
if close[1] < open[1]
    breakout_failure := close > open[1]

if close[1] > open[1]
    breakout_failure := close < open[1]

barcolor(congestionZone1[1] and breakout_failure  ? color.orange : na )

// rising/failling three
barcolor(risingThree() or fallingThree() ? color.yellow : na)
barcolor(risingThreeFail() or fallingThreeFail() ? color.yellow : na)

//Stalled pattern 
barcolor(bullishStalled() or bearishStalled() ? color.blue : na)

// Channel break
barcolor(decreasingChannelBreakout() or ascendingChannelBreakout() ? color.yellow : na)
plotshape(decreasingChannelBreakout(), text="LHB", title="Lower High Break", style = shape.labelup, location =  location.belowbar, color = color.lime, textcolor = color.white)
plotshape(ascendingChannelBreakout(), text="HLB", title="Higher Low Break", style = shape.labeldown, location =  location.abovebar, color = color.red, textcolor = color.black)

// Kangaroo
barcolor(topKangaroo() or bottomKangaroo()? color.silver : na)
plotshape(bottomKangaroo(), text="KGR", title="Bullish Kangaroo", style = shape.labelup, location =  location.belowbar, color = color.lime, textcolor = color.white)
plotshape(topKangaroo() , text="KGR", title="Bearish Kangaroo", style = shape.labeldown, location =  location.abovebar, color = color.red, textcolor = color.black)

alertcondition(topKangaroo() or bottomKangaroo(), title="Kangaroo Tail")

// Morning/Evening Star
barcolor(morningStar() or morningStar2() or eveningStar() or eveningStar2() ? color.purple : na)
plotshape(close > open and (morningStar() or morningStar2()), text="MS", title="Morning Star", style = shape.labelup, location =  location.belowbar, color = color.lime, textcolor = color.white)
plotshape(close < open and (eveningStar() or eveningStar2()), text="ES", title="Evening Star", style = shape.labeldown, location =  location.abovebar, color = color.red, textcolor = color.black)

alertcondition(morningStar() or eveningStar(), title="Morning/Evening Star")

//Symmetrical Triangle
barcolor(symmetricalTriangle() ? color.white : na)
plotshape(close > open and symmetricalTriangle(), text="ST", title="Symmetrical Triangle", style = shape.labelup, location =  location.belowbar, color = color.lime, textcolor = color.white)
plotshape(close < open and symmetricalTriangle(), text="ST", title="Symmetrical Triangle", style = shape.labeldown, location =  location.abovebar, color = color.red, textcolor = color.black)

barcolor(symmetricalTriangleBreakout() ? color.yellow : na)
plotshape(close > open and symmetricalTriangleBreakout(), text="STB", title="Symmetrical Triangle Break Up", style = shape.labelup, location =  location.belowbar, color = color.lime, textcolor = color.white)
plotshape(close < open and symmetricalTriangleBreakout(), text="STB", title="Symmetrical Triangle Break Down", style = shape.labeldown, location =  location.abovebar, color = color.red, textcolor = color.black)

// three white soldiers / three black crows
barcolor(threeWhiterSoldier() or threeBlackCrows() ? color.blue : na)

//Pinbar
barcolor(spb and bullishPinbar  ? color.lime : na)
barcolor(spb and bearishPinbar ? color.maroon : na)
